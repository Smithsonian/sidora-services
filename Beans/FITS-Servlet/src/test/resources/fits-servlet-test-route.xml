<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2015-2019 Smithsonian Institution.
  ~
  ~  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~  use this file except in compliance with the License.You may obtain a copy of
  ~  the License at: http://www.apache.org/licenses/
  ~
  ~  This software and accompanying documentation is supplied without
  ~  warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~  (1) expressly disclaim any warranties, express or implied, including but not
  ~  limited to any implied warranties of merchantability, fitness for a
  ~  particular purpose, title or non-infringement; (2) do not assume any legal
  ~  liability or responsibility for the accuracy, completeness, or usefulness of
  ~  the software; (3) do not represent that use of the software would not
  ~  infringe privately owned rights; (4) do not warrant that the software
  ~  is error-free or will be maintained, supported, updated or enhanced;
  ~  (5) will not be liable for any indirect, incidental, consequential special
  ~  or punitive damages of any kind or nature, including but not limited to lost
  ~  profits or loss of data, on any basis arising from contract, tort or
  ~  otherwise, even if any of the parties has been warned of the possibility of
  ~  such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~  license terms. For a complete copy of all copyright and license terms, including
  ~  those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xsi:schemaLocation="
         http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
         http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
         http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
         http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
         http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd">

    <cm:property-placeholder id="sidora.karaf.test.utils.fits.properties" persistent-id="edu.si.sidora.fits" update-strategy="none">
        <cm:default-properties>
            <cm:property name="edu.si.fits.test" value="edu.si.fits.test"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="FITSRoutes" class="edu.si.services.beans.fitsservlet.FITSServletRouteBuilder"/>

    <bean id="dropHeadersStrategy" class="org.apache.camel.impl.DefaultHeaderFilterStrategy">
        <property name="outFilterPattern" value=".*"/>
    </bean>

    <!-- Provides the Camel routing setup -->
    <camelContext id="FITS-Servlet-Test-CamelContext"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  trace="false"
                  useMDCLogging="true">

        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="file:${karaf.home}/edu.si.sidora.fits.cfg"/>

        <routeBuilder ref="FITSRoutes"/>

        <route id="AddFITSDataStream">
            <from uri="direct:addFITSDataStream"/>
            <!--
            <onException>
                <exception>java.net.SocketException</exception>
                <redeliveryPolicy useExponentialBackOff="true"
                                  backOffMultiplier="2"
                                  redeliveryDelay="100"
                                  maximumRedeliveries="2"
                                  retryAttemptedLogLevel="WARN"/>
                <continued>
                    <constant>true</constant>
                </continued>
                <log message="[${routeId}] :: FITS web service request failed!!! Error reported: ${exception.message}"
                     loggingLevel="WARN"
                     id="fitsServiceException"/>
            </onException>
            -->

            <log message="${id}: Started processing FITS ..."/>

            <!--
               Ensure that we actually have a 200 response from the fits web service as this header could have been
               set upstream by another http request.
            -->
            <removeHeader headerName="CamelHttpResponseCode"/>

            <!-- Get the FITS analysis of the file. -->
            <to uri="direct:getFITSReport"/>

            <log message="${id} FITS Output:\n${body}"/>

            <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
            <choice>
                <when>
                    <simple>
                        ${header.CamelHttpResponseCode} == 200
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                    </setHeader>
                    <log message="${id}: FITS MIME: ${headers.dsMIME}"/>
                    <log message="${id}: FITS. BODY: ${body}"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false" id="fitsAddDatastream"/>
                </when>
                <otherwise>
                    <log message="${id}: FITS processing failed for PID: ${header.CamelFedoraPid}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished processing FITS."/>
        </route>

    </camelContext>

</blueprint>
