<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2015-2016 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- <osgi:reference id="activemq" interface="org.apache.camel.Component"/> -->

    <!--  ActiveMQ destinations to use  -->
    <!--
    We likely want to change to a queue.
    <bean id="destination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg type="java.lang.String" value="${sidora.broker.topics}"/>
    </bean>
    -->

    <!-- JMS ConnectionFactory to use, configuring the embedded broker using XML -->
    <bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
        <!-- <property name="brokerURL" value="${broker.url}"/> -->
        <property name="brokerURL" value="tcp://localhost:61616"/>
        <property name="userName" value="smx"/>
        <property name="password" value="smx"/>
    </bean>

    <!-- Use a pooled connections for scalability -->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
        <property name="maxConnections" value="8" />
        <property name="connectionFactory" ref="connectionFactory" />
    </bean>

    <!-- Use pooled connections for JMS -->
    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="concurrentConsumers" value="1"/>
        <!-- When ready we can make this run more consumers. -->
        <!-- <property name="concurrentConsumers" value="10"/> -->
    </bean>

    <!-- Use the Camel JMS Components for performance and route flexibility -->
    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory" ref="connectionFactory"/>
    </bean>

    <!-- Use the Camel AMQ component for performance -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
    </bean>

    <bean id="excelToCSV" class="edu.si.services.beans.excel.ExcelToCSV"/>

    <bean id="modelAggregator" class="edu.si.services.fedorarepo.aggregators.ContentModelAggregationStrategy"/>
    
    <bean id="contentModels" class="java.util.HashSet"/>

    <!-- Provides the Camel routing setup -->
    <camelContext id="DerivativesCamelContext"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:atom="http://www.w3.org/2005/Atom"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:fs="info:fedora/fedora-system:def/model#"
                  xmlns:fedora-types="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fsmgmt="http://www.fedora.info/definitions/1/0/management/"
                  trace="false"
                  streamCache="true">

        <!--
            The "unused" namespace definitions above are needed to deal with the way Camel handles namespaces in XPath.
        -->


        <!--
        <errorHandler id="derivativesErrorHandler" type="DefaultErrorHandler">
            <redeliveryPolicy maximumRedeliveries="20"
                              retryAttemptedLogLevel="WARN"
                              backOffMultiplier="2"
                              useExponentialBackOff="true"/>
        </errorHandler>
        -->

        <onException>
            <exception>java.net.ConnectException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="1000"
                              maximumRedeliveries="200"
                              retryAttemptedLogLevel="WARN"/>
        </onException>

        <!--
        <onException>
            <exception>javax.imageio.IIOException</exception>
            <redeliveryPolicy maximumRedeliveries="1"/>
            <handled>
                <constant>
                    true
                </constant>
            </handled>
        </onException>
        -->

        <route id="DerivativesStartProcessing">
            <from uri="activemq:queue:sidora.apim.update"/>
            <log message="${id} Derivatives: Starting processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            <log message="${id} Derivatives: Processing PID: ${headers.pid}  Method Name: ${headers.methodName}  Origin: {{si.fedora.user}}"/>
            <log message="${id} Derivatives: Processing BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            
            <!--
                The login used by the source of the message is put in the ATOM Author element by Fedora. Since this
                is a system login not a end-user, we can use this to identify the process that is the source of
                the message.
            -->

            <!-- Filter for messages coming from monitored processes. -->
            <filter>
                <xpath>
                    /atom:entry/atom:author/atom:name = '{{si.fedora.user}}'
                </xpath>
                <log message="${id} Derivatives: No message processing required."/>
                <stop/>
            </filter>
            
            <!-- Filter out Fedora API methods that do not need derivatives processing. -->
            <!-- This could be done with a JMS selector. -->
            <filter>
                <simple>
                    ${headers.methodName} in &#39;addDatastream,modifyDatastreamByValue,modifyDatastreamByReference,modifyObject,ingest&#39;
                </simple>
                <log message="${id} Derivatives: Process Message."/>
                <to uri="direct:processDerivativesMessage"/>
            </filter>
            
            <log message="${id} Derivatives: Finished processing."/>
        </route>
        
        <route id="DerivativesProcessMessage">
            <from uri="direct:processDerivativesMessage"/>
            <log message="${id} Derivatives: Starting Derivatives Message processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            
            <!-- Get the PID of the FDO that was just operated upon. -->
            <log message="${id} Derivatives: PID: ${headers.pid}  Method Name: ${headers.methodName}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${headers.pid}
                </simple>
            </setHeader>

            <!-- Get the DSID from the Atom message if any. -->
            <setHeader headerName="DSID">
                <xpath resultType="java.lang.String">
                    /atom:entry/atom:category[@scheme="fedora-types:dsID"]/@term
                </xpath>
            </setHeader>
            <log message="${id} Derivatives: Atom DSID: ${headers.DSID}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Get the Content Models for the FDO and put them on a list. -->
            <to uri="fedora://getDatastreamDissemination?dsId=RELS-EXT&amp;exchangePattern=InOut"/>
            <convertBodyTo type="java.lang.String" charset="utf-8"/>
            <log message="${id} Derivatives: RELS-EXT: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            <split strategyRef="modelAggregator">
                <xpath>
                    //fs:hasModel/@rdf:resource
                </xpath>
                <log message="${id} Derivatives: Split Content Model. BODY: ${body}"
                     loggingLevel="DEBUG"
                     logName="edu.si.derivatives"/>
            </split>
            <log message="${id} Derivatives: Content Models: ${header.ContentModels}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            
            <choice> <!-- Filter by content model. -->
                <when> <!-- If imageCModel or generalImageCModel, and the DSID is "OBJ" - process the image." -->
                    <spel>
                        #{(request.headers[ContentModels].contains('info:fedora/si:imageCModel') or
                          request.headers[ContentModels].contains('info:fedora/si:generalImageCModel')) and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found Image."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesImage"/>
                </when>
                <when> <!-- If imageCModel or generalImageCModel, and the DSID is "OBJ" - process the image." -->
                    <spel>
                        #{request.headers[ContentModels].contains('info:fedora/si:fieldbookCModel') and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found PDF."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesPDF"/>
                </when>
                <when> <!-- If imageCModel or generalImageCModel, and the DSID is "OBJ" - process the image." -->
                    <spel>
                        #{request.headers[ContentModels].contains('info:fedora/si:datasetCModel') and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found Dataset."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesDataset"/>
                </when>
                <when> <!-- If sp-audioCModel, and the DSID is "OBJ" - process the audio file." -->
                    <spel>
                        #{request.headers[ContentModels].contains('info:fedora/islandora:sp-audioCModel') and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found Audio."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesAudio"/>
                </when>

                <when> <!-- If sp_videoCModel, and the DSID is "OBJ" - process the video file." -->
                    <spel>
                        #{request.headers[ContentModels].contains('info:fedora/islandora:sp_videoCModel') and
                          request.headers[DSID] == 'OBJ'}
                    </spel>
                    <log message="${id} Derivatives: Found Video."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <to uri="direct:processDerivativesVideo"/>
                </when>

                <otherwise> <!-- No supported content model was found. -->
                    <log message="${id} Derivatives: No message processing required."/>
                </otherwise>
            </choice>
            
            <log message="${id} Derivatives: Finished Message processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessImage">
            <from uri="direct:processDerivativesImage"/>
            <log message="${id} Derivatives: Starting Image processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- We could submit the file to FITS processing to get the MIME but that can be complicated. -->
            <!-- We could get the MIME type from the datastream metadata or FITS (or both and compare). -->
            <!-- For now we will just trust Fedora's datastream metadata. -->
            <!-- We really should only make new derivatives if the OBJ has changed. -->

            <!-- Get the MIME type from the datastream profile. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">
                    /fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()
                </xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!--
                DGI has quite a bit more in their Python conversions so we need to improve this.
            -->

            <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
            <to uri="file://staging/"/>
            <log message="${id} Derivatives: Staged file Name: ${header.CamelFileNameProduced}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <choice> <!-- Filter content by image format. -->

                <when> <!-- If the image is a JPEG? Add an archival JPEG2000 and a thumbnail to the FDO. -->
                    <simple>
                        ${header.dsMIME} == 'image/jpg' || ${header.dsMIME} == 'image/jpeg' || ${header.dsMIME} == 'image/jpe'
                    </simple>
                    <log message="${id} Derivatives: Found JPEG."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <!-- Add a thumbnail from the JPEG. -->
                    <multicast>
                        <to uri="direct://processDerivativesThumbnailator"/>
                        <to uri="direct://processDerivativesFITS"/>
                        <!-- Future: Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                    </multicast>
                </when>

                <when> <!-- If the image is a TIFF? Add a JPG datastream and thumbnail for the image to the FDO. -->
                    <simple>
                        ${header.dsMIME} == 'image/tiff' || ${header.dsMIME} == 'image/tif'
                    </simple>
                    <log message="${id} Derivatives: Found TIFF."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <multicast>
                        <to uri="direct://processDerivativesTIFFImage"/>
                        <to uri="direct://processDerivativesFITS"/>
                        <!-- Future: Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                    </multicast>
                </when>

                <when> <!-- If the image is a JPEG2000? Add a JPG datastream and thumbnail to the FDO. -->
                    <simple>
                        ${header.dsMIME} == 'image/jp2'
                    </simple>
                    <log message="${id} Derivatives: Found JPEG2000."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <multicast>
                        <to uri="direct://processDerivativesJP2Image"/>
                        <to uri="direct://processDerivativesFITS"/>
                    </multicast>
                </when>

                <when> <!-- If the image is a PNG, GIF, BMP? Add a JPG datastream and thumbnail for the image to the FDO. -->
                    <simple>
                        ${header.dsMIME} == 'image/png' || ${header.dsMIME} == 'image/gif' || ${header.dsMIME} == 'image/bmp'
                    </simple>
                    <log message="${id} Derivatives: Found PNG, GIF or BMP."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <multicast>
                        <to uri="direct://processDerivativesBGPImage"/>
                        <to uri="direct://processDerivativesFITS"/>
                        <!-- Future: Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                    </multicast>
                </when>

                <otherwise>
                    <!-- If the image is some other MIME type, just log a warning? -->
                    <log message="${id} Derivatives: Unsupported image type found. MIME: ${headers.dsMIME}"
                         loggingLevel="WARN"/>
                </otherwise>

            </choice>

            <recipientList> <!-- Delete the temporary file. Note: This approach is Unix specific. -->
                <simple>
                    exec:rm?args=-f ${header.CamelFileNameProduced}
                </simple>
            </recipientList>
            <choice>
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} != 0
                    </simple>
                    <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}"
                         loggingLevel="WARN"/>
                    <!-- We also want to proactively tell monitoring -->
                </when>
            </choice>

            <log message="${id} Derivatives: Finished Image processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessTIFFImage">
            <from uri="direct:processDerivativesTIFFImage"/>
            <log message="${id} Derivatives: Starting TIFF image processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <recipientList>
                <simple>
                    <!-- exec:convert?args= - jpg:- -->
                    exec:convert?args= - jpg:${header.CamelFileNameProduced}.jpg
                </simple>
            </recipientList>
            <choice>
                <when> <!-- If the conversion succeeded? Add a display datastream for the image to the FDO. -->
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>
                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=DISPLAY&amp;type=image/jpg&amp;group=M&amp;dsLabel=DISPLAY&amp;versionable=false"/>
                    <!-- Also add a thumbnail from the JPEG since TIFF is not supported. -->
                    <to uri="direct:processDerivativesThumbnailator"/>

                    <!-- Delete the temporary JPG conversion file. Note: This approach is Unix specific. -->
                    <recipientList>
                        <simple>
                            exec:rm?args=-f ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </recipientList>
                    <choice>
                        <when>
                            <simple>
                                ${headers.CamelExecExitValue} != 0
                            </simple>
                            <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}.jpg"
                                 loggingLevel="WARN"/>
                            <!-- We also want to proactively tell monitoring -->
                        </when>
                    </choice>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Unable to convert TIFF to JPG. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Derivatives: Finished TIFF Image processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessJP2Image">
            <from uri="direct:processDerivativesJP2Image"/>
            <log message="${id} Derivatives: Starting JP2 image processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- We need to convert to a good lossless JPEG2000. This current code uses a very naive approach. -->

            <recipientList>
                <simple>
                    <!-- exec:convert?args= - jpg:- -->
                    exec:convert?args= - jpg:${header.CamelFileNameProduced}.jpg
                </simple>
            </recipientList>
            <choice>
                <when> <!-- If the conversion succeeded, Add a display datastream for the image to the FDO? -->
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>
                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=DISPLAY&amp;type=image/jpg&amp;group=M&amp;dsLabel=DISPLAY&amp;versionable=false"/>
                    <!-- Also add a thumbnail from the JPEG since JPG2 is not supported. -->
                    <to uri="direct:processDerivativesThumbnailator"/>

                    <!-- Delete the temporary JPG conversion file. Note: This approach is Unix specific. -->
                    <recipientList>
                        <simple>
                            exec:rm?args=-f ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </recipientList>
                    <choice>
                        <when>
                            <simple>
                                ${headers.CamelExecExitValue} != 0
                            </simple>
                            <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}.jpg"
                                 loggingLevel="WARN"/>
                            <!-- We also want to proactively tell monitoring -->
                        </when>
                    </choice>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Unable to convert JP2 to JPG. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Derivatives: Finished JP2 Image processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessBGPImage">
            <from uri="direct:processDerivativesBGPImage"/>
            <log message="${id} Derivatives: Starting BGP image processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <recipientList>
                <simple>
                    <!-- exec:convert?args= - jpg:- -->
                    exec:convert?args= - jpg:${header.CamelFileNameProduced}.jpg
                </simple>
            </recipientList>
            <choice>
                <when> <!-- If the conversion succeeded? Add a display datastream for the image to the FDO. -->
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>
                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=DISPLAY&amp;type=image/jpg&amp;group=M&amp;dsLabel=DISPLAY&amp;versionable=false"/>
                    <to uri="direct://processDerivativesThumbnailator"/>

                    <!-- Delete the temporary JPG conversion file. Note: This approach is Unix specific. -->
                    <recipientList>
                        <simple>
                            exec:rm?args=-f ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </recipientList>
                    <choice>
                        <when>
                            <simple>
                                ${headers.CamelExecExitValue} != 0
                            </simple>
                            <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}.jpg"
                                 loggingLevel="WARN"/>
                            <!-- We also want to proactively tell monitoring -->
                        </when>
                    </choice>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Unable to convert TIFF to JPG. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Derivatives: Finished BGP Image processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessDataset">
            <from uri="direct:processDerivativesDataset"/>
            <log message="${id} Derivatives: Starting Dataset processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- We could submit the file to FITS processing to get the MIME but that can be complicated. -->
            <!-- We could get the MIME type from the datastream metadata or FITS (or both and compare). -->
            <!-- For now we will just trust Fedora's datastream metadata. -->
            <!-- We really should only make new derivatives if the OBJ has changed. -->
            <!-- <to uri="direct://processDerivativesFITS"/> -->

            <!-- Get the MIME type from the datastream profile. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">
                    /fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()
                </xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <choice> <!-- Filter content by dataset format. -->

                <when> <!-- If the content is Excel? -->
                    <simple>
                        ${header.dsMIME} == 'application/vnd.ms-excel' || ${header.dsMIME} == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                    </simple>
                    <log message="${id} Derivatives: Found Excel."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <bean ref="excelToCSV" method="convertExcelToCSV"/>
                    <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
                </when>

                <when> <!-- If the content is a CSV? Just add a datastream to the FDO. -->
                    <simple>
                        ${header.dsMIME} == 'text/csv'
                    </simple>
                    <log message="${id} Derivatives: Found CSV."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>

                    <!-- Copy the OBJ datastream to the CSV datastream. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
                </when>

                <otherwise>
                    <!-- If the dataset is some other mime type, just log a warning? -->
                    <log message="${id} Derivatives: Not a supported dataset format.. MIME: ${headers.dsMIME}"
                         loggingLevel="WARN"/>
                </otherwise>

            </choice>

            <log message="${id} Derivatives: Finished Dataset processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessPDF">
            <from uri="direct:processDerivativesPDF"/>
            <log message="${id} Derivatives: Starting PDF processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- We really should make new derivatives only if OBJ has changed. -->
            <!-- We could get the MIME type from the datastream metadata or FITS (or both and compare). -->
            <!-- <to uri="direct://processDerivativesFITS"/> -->

            <!-- Get the MIME type from the datastream profile. -->
            <!-- We should try the getDatastream more than once if it fails. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">
                    /fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()
                </xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <choice> <!-- Filter the content by PDF type (remember PDF-A) -->

                <when> <!-- If the content is a PDF? Create a thumbnail and an SWF derivative. -->
                    <simple>
                        ${header.dsMIME} == 'application/pdf'
                    </simple>
                    <log message="${id} Derivatives: Process PDF."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    
                    <!-- Get the PDF from the FDO. -->
                    <!-- We should try the getDatastreamDissemination more than once if it fails. -->
                    <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
                    <to uri="file://staging/"/>  <!-- This will create a temporary file that must be cleaned out. -->

                    <to uri="direct:processDerivativesThumbnailImage"/>
                    <to uri="direct:processDerivativesPDF2SWF"/>

                    <recipientList> <!-- Delete the temporary file. Note: This approach is Unix specific. -->
                        <simple>
                            exec:rm?args=-f ${header.CamelFileNameProduced}
                        </simple>
                    </recipientList>
                    <choice>
                        <when>
                            <simple>
                              ${headers.CamelExecExitValue} != 0
                            </simple>
                            <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}"
                                 loggingLevel="WARN"/>
                            <!-- We also want to proactively tell monitoring -->
                       </when>
                    </choice>
                </when>
                <otherwise>
                    <!-- If the PDF is some other mime type, just log a warning? -->
                    <log message="${id} Derivatives: Not a PDF. MIME: ${headers.dsMIME}"
                         loggingLevel="WARN"
                         logName="edu.si.derivatives"/>
                </otherwise>
            </choice>

            <log message="${id} Derivatives: Finished PDF processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessPDF2SWF">
            <from uri="direct:processDerivativesPDF2SWF"/>
            <log message="${id} Derivatives: Started PDF2SWF processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Create a Flash derivative using pdf2swf for the Flexpaper viewer. -->
            <!-- Unfortunately pdf2swf cannot accept a pipe as an input stream source, hence we use a temporary file. -->

            <recipientList>
                <simple>
                    exec:pdf2swf?args=${header.CamelFileNameProduced} -o ${header.CamelFileNameProduced}.swf
                </simple>
            </recipientList>
            <choice>

                <when>
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>

                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.swf
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=OBJ.swf&amp;type=application/x-shockwave-flash&amp;group=M&amp;dsLabel=Flexpaper&amp;versionable=false"/>

                    <recipientList> <!-- Delete the temporary SWF conversion file. Note: This approach is Unix specific. -->
                        <simple>
                            <!--
                            The conversion will fail if the picture is too complex.  The current decision is to log
                            the failure and just force the use of the PDF only.
                            -->
                            exec:rm?args=-f ${header.CamelFileNameProduced}.swf
                        </simple>
                    </recipientList>
                    <choice>
                       <when>
                           <simple>
                               ${headers.CamelExecExitValue} != 0
                           </simple>
                           <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}.swf"
                                loggingLevel="WARN"/>
                           <!-- We also want to proactively tell monitoring -->
                       </when>
                    </choice>
                </when>

                <otherwise>
                    <log message="${id} Derivatives: Unable to convert PDF to SWF. PID: ${headers.CamelFedoraPid}  ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>

            </choice>

            <log message="${id} Derivatives: Finished PDF2SWF processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessFITS">
            <from uri="direct:processDerivativesFITS"/>
            <log message="${id} Derivatives: Started FITS processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Create a FITS derivative using Harvard FITS. -->
            <recipientList>
                <simple>
                    <!-- exec:fits?args=-i ${header.CamelFileNameProduced} -o ${header.CamelFileName.produced}.xml -->
                    exec:fits?args=-i ${header.CamelFileNameProduced}
                    <!-- exec:fits?args=RAW(-i <<< /dev/stdin) -->
                </simple>
            </recipientList>
            <choice>
                <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id} Derivatives: FITS MIME: ${headers.FITSmimeType}"
                             loggingLevel="DEBUG"
                             logName="edu.si.derivatives"/>
                    </setHeader>
                    <log message="${id} Derivatives: Exec FITS. BODY: ${body}"
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                    <convertBodyTo type="java.lang.String"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: FITS processing failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Finished Derivatives FITS processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessAudio">
            <from uri="direct:processDerivativesAudio"/>
            <log message="${id} Derivatives: Started Audio processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Get the MIME type from the datastream profile. -->
            <!-- We should try the getDatastream more than once if it fails. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Datastream Metadata. BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">
                    /fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()
                </xpath>
            </setHeader>
            <log message="${id} Derivatives: Datastream Metadata. MIME: ${header.dsMIME}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Get the Audio from the FDO. -->
            <!-- We should try the getDatastreamDissemination more than once if it fails. -->
            <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>

            <choice>
                <!-- If the OBJ datastream contains an mp3? -->
                <when>
                    <simple>
                        ${header.dsMIME} == 'audio/mpeg'
                    </simple>
                    <!-- Just copy it. -->
                    <to uri="fedora:addDatastream?name=PROXY_MP3&amp;type=audio/mpeg&amp;dsLabel=PROXY_MP3&amp;group=M&amp;versionable=false"/>
                    <log message="${id} Derivatives: No processing required copying mp3 directly to PROXY_MP3."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                </when>
                <when>
                    <simple>
                        ${header.dsMIME} == 'audio/vnd.wave' ||
                        ${header.dsMIME} == 'audio/x-aiff'
                    </simple>
                    <!-- Make an MP3 derivative. -->
                    <!-- Create an audio derivative using the lame encoder. -->
                    <recipientList>
                        <simple>
                            exec:lame?args= -V5 --vbr-new - -
                        </simple>
                    </recipientList>
                    <choice>
                        <!-- If lame processing succeeded? Store a PROXY_MP3 datastream on the FDO. -->
                        <when>
                            <simple>
                                ${headers.CamelExecExitValue} == 0
                            </simple>
                            <to uri="fedora:addDatastream?name=PROXY_MP3&amp;type=audio/mpeg&amp;dsLabel=PROXY_MP3&amp;group=M&amp;versionable=false"/>
                            <log message="${id} Derivatives: Adding converted audio as mp3 to PROXY_MP3."
                                 loggingLevel="DEBUG"
                                 logName="edu.si.derivatives"/>
                        </when>
                        <otherwise>
                            <log message="${id} Derivatives: LAME processing failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                                 loggingLevel="ERROR"/>
                        </otherwise>
                    </choice>

                </when>
                <otherwise>
                    <log message="${id} An unsupported audio file type was found: ${header.dsMIME}."
                         loggingLevel="WARN"/>
                </otherwise>
            </choice>

            <log message="${id} Finished Derivatives Audio processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessThumbnailator">
            <from uri="direct:processDerivativesThumbnailator"/>
            <log message="${id} Derivatives: Started Thumbnailator processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Create a thumbnail derivative using the Thumbnailator library. -->
            <!--
            <to uri="thumbnailator:image?keepRatio=false&amp;size=(200,150)"/>
            <to uri="fedora:addDatastream?name=TN&amp;type=image/jpg&amp;group=M&amp;dsLabel=Thumbnail&amp;versionable=false"/>
            -->

            <doTry>
                <to uri="thumbnailator:image?keepRatio=true&amp;size=(200,150)"/>
                <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M&amp;dsLabel=Thumbnail&amp;versionable=false"/>
                <doCatch>
                    <exception>javax.imageio.IIOException</exception>
                    <log message="${id} CameraTrapIngest: Cannot create thumbnail image corrupted."
                         loggingLevel="WARN"
                         logName="edu.si.derivatives"/>
                </doCatch>
            </doTry>

            <log message="${id} Derivatives: Finished Thumbnailator processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessThumbnailImage">
            <from uri="direct:processDerivativesThumbnailImage"/>
            <log message="${id} Derivatives: Started Thumbnail Image processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!--
                Making a call to camel:exec is less reliable and portable then using the Thumbnailator library.
                However, ImageMagick can create Thumbnails for formats that Thumbnailator cannot, for this case
                primarily PDF to JPG.  This route uses ImageMagick directly to create the thumbnail. The alternative
                is an intermediate JPG which takes a second step to accomplish.
            -->

            <!-- Create a thumbnail derivative using ImageMagick. -->
            <recipientList>
                <simple>
                    <!-- The arg tokenizer strips of the plus for profile. Workaround is to wrap all the args in RAW(). -->
                    <!-- exec:convert?args=RAW(-[0] -thumbnail 200x150 -colorspace RGB +profile * jpg:-) -->
                    <!-- Convert only the first page since the PDF may have multiple pages. -->
                    <!-- exec:convert?args= -[0] -thumbnail 200x150 -colorspace RGB jpg:- -->
                    exec:convert?args= -[0] -thumbnail 200x150 -colorspace RGB jpg:${header.CamelFileNameProduced}.jpg
                </simple>
            </recipientList>
            <choice>
                <when> <!-- If the conversion succeeded? Store the thumbnail image datastream on the FDO. -->
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>

                    <setBody><simple>${header.CamelFileNameProduced}.jpg</simple></setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M&amp;dsLabel=Thumbnail&amp;versionable=false"/>

                    <recipientList> <!-- Delete the temporary JPG conversion file. Note: This approach is Unix specific. -->
                        <simple>
                            exec:rm?args=-f ${header.CamelFileNameProduced}.jpg
                        </simple>
                    </recipientList>
                    <choice>
                        <when>
                            <simple>
                                ${headers.CamelExecExitValue} != 0
                            </simple>
                            <log message="${id} Derivatives: Unable to delete working file. Filename: ${headers.CamelFileNameProduced}.jpg"
                                 loggingLevel="WARN"/>
                            <!-- We also want to proactively tell monitoring. -->
                        </when>
                    </choice>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Unable to create thumbnail image. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Derivatives: Finished Thumbnail Image processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <!--=========================== STARTING VIDEO ROUTES ================================-->

        <route id="DerivativesProcessVideo">
            <from uri="direct:processDerivativesVideo"/>
            <log message="${id} Derivatives: Started Video processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Get the MIME type from the datastream profile. -->
            <!-- We should try the getDatastream more than once if it fails. -->
            <to uri="fedora://getDatastream?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="${id} Derivatives: Video Datastream Metadata. BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <setHeader headerName="dsMIME">
                <xpath resultType="java.lang.String">
                    /fsmgmt:datastreamProfile/fsmgmt:dsMIME/text()
                </xpath>
            </setHeader>

            <log message="${id} Derivatives: Video Datastream Metadata. MIME: ${header.dsMIME}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Get the Video from the FDO. -->
            <!-- We should try the getDatastreamDissemination more than once if it fails. -->
            <to uri="fedora://getDatastreamDissemination?dsId=OBJ&amp;exchangePattern=InOut"/>
            <log message="Got The Video OBJ from Fedora......."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <to uri="file://staging/"/>
            <log message="${id} Derivatives: Staged video file. BODY: ${body}"
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <setBody>
                <simple>
                    ${headers.CamelFileNameProduced}
                </simple>
            </setBody>

            <choice>
                <!-- If the OBJ datastream contains a supported video format : OGG, MP4, MOV, QT, M4V, AVI, MKV -->
                <when>

                    <simple>
                        ${header.dsMIME} == 'video/mp4'
                    </simple>
                    <setHeader headerName="videoInput">
                        <simple>
                            ${headers.CamelFileNameProduced}
                        </simple>
                    </setHeader>

                    <to uri="reader:file"/>

                    <!-- Just copy it and create thumbnail. -->
                    <to uri="fedora:addDatastream?name=MP4&amp;type=video/mp4&amp;dsLabel=MP4&amp;group=M&amp;versionable=false"/>
                    <to uri="direct:processDerivativesVideoThumbnailTimePosition"/>
                    <to uri="direct:processDerivativesVideoThumbnail"/>

                    <log message="${id} Derivatives: No Video processing required copying mp4 directly to MP4."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                </when>

                <when>
                    <simple>
                        ${header.dsMIME} == 'video/m4v' ||
                        ${header.dsMIME} == 'video/quicktime' ||
                        ${header.dsMIME} == 'video/avi' ||
                        ${header.dsMIME} == 'video/x-matroska'
                    </simple>

                    <!-- Make an MP4 derivative and TN. -->
                    <!-- Create a video derivative and thumbnail using ffmpeg. -->
                    <to uri="direct:processDerivativesVideoFFMPEG"/>
                    <to uri="fedora:addDatastream?name=MP4&amp;type=video/mp4&amp;dsLabel=MP4&amp;group=M&amp;versionable=false"/>
                    <to uri="direct:processDerivativesVideoThumbnailTimePosition"/>
                    <to uri="direct:processDerivativesVideoThumbnail"/>
                </when>

                <when>
                    <simple>
                        ${header.dsMIME} == 'audio/mp4' ||
                        ${header.dsMIME} == 'audio/ogg' ||
                        ${header.dsMIME} == 'audio/m4a'
                    </simple>

                    <!-- Make an MP4 derivative and TN. -->
                    <!-- Create a audio derivative using ffmpeg and MP4. -->
                    <to uri="direct:processDerivativesVideoFFMPEG"/>
                    <to uri="fedora:addDatastream?name=MP4&amp;type=video/mp4&amp;dsLabel=MP4&amp;group=M&amp;versionable=false"/>

                    <!-- Create a audio thumbnail TN. -->
                    <setBody>
                        <simple>
                            Input/video-thumbnails/audio-video.png
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=TN&amp;type=video/jpg&amp;dsLabel=TN&amp;group=M&amp;versionable=false"/>
                </when>

                <otherwise>
                    <!-- mime type unknown set thumbnail TN to unknown video -->
                    <setBody>
                        <simple>
                            Input/video-thumbnails/video_unknown.png
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=TN&amp;type=video/jpg&amp;dsLabel=TN&amp;group=M&amp;versionable=false"/>
                    <log message="${id} An unsupported video file type was found: ${header.dsMIME}."
                         loggingLevel="WARN"/>
                </otherwise>

            </choice>

            <!-- Delete the temporary thumbnail file. Note: This approach is Unix specific. -->
            <recipientList>
                <simple>
                    exec:rm?args=-f ${header.CamelFileNameProduced}-TN.jpg
                </simple>
            </recipientList>
            <choice>
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} != 0
                    </simple>
                    <log message="${id} Derivatives: Unable to delete Thumbnail working file. Filename: ${headers.CamelFileNameProduced}-TN.jpg4"
                         loggingLevel="WARN"/>
                    <!-- We also want to proactively tell monitoring -->
                </when>
            </choice>

            <!-- Delete the temporary mp4 file. Note: This approach is Unix specific. -->
            <recipientList>
                <simple>
                    exec:rm?args=-f ${header.CamelFileNameProduced}.mp4
                </simple>
            </recipientList>
            <choice>
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} != 0
                    </simple>
                    <log message="${id} Derivatives: Unable to delete video working file. Filename: ${headers.CamelFileNameProduced}.mp4"
                         loggingLevel="WARN"/>
                    <!-- We also want to proactively tell monitoring -->
                </when>
            </choice>

            <!-- Delete the temporary staging file. Note: This approach is Unix specific. -->
            <recipientList>
                <simple>
                    exec:rm?args=-f ${header.CamelFileNameProduced}
                </simple>
            </recipientList>
            <choice>
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} != 0
                    </simple>
                    <log message="${id} Derivatives: Unable to delete video working file. Filename: ${headers.CamelFileNameProduced}"
                         loggingLevel="WARN"/>
                    <!-- We also want to proactively tell monitoring -->
                </when>
            </choice>

            <log message="${id} Finished Derivatives Video processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessVideoFFMPEG">
            <from uri="direct:processDerivativesVideoFFMPEG"/>
            <log message="${id} Derivatives: Started Video FFMPEG processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Make an MP4 derivative. -->
            <!-- Create a video derivative using ffmpeg. -->
            <recipientList>
                <simple>
                    exec:/usr/local/bin/ffmpeg?args=-nostats -nostdin -i ${header.CamelFileNameProduced} -f mp4 -vcodec libx264 -preset medium -acodec libfdk_aac -ab 128k -ac 2 -async 1 ${header.CamelFileNameProduced}.mp4
                </simple>
            </recipientList>

            <choice>
                <!-- If ffmpeg processing succeeded? Store a MP4 datastream on the FDO. -->
                <when>

                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>

                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}.mp4
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>

                    <setHeader headerName="videoInput">
                        <simple>
                            ${headers.CamelFileNameProduced}.mp4
                        </simple>
                    </setHeader>

                    <log message="${id} Derivatives: Converted Video to mp4."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: FFMPEG processing failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Finished Derivatives Video FFMPEG processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessVideoThumbnailTimePosition">
            <from uri="direct:processDerivativesVideoThumbnailTimePosition"/>
            <log message="${id} Derivatives: Started Video thumbnail time position processing ..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <recipientList>
                <simple>
                    exec:/usr/local/bin/ffprobe?args=-v error -select_streams v:0 -show_entries stream=duration -of compact=print_section=0:nokey=1 ${header.videoInput}&amp;useStderrOnEmptyStdout=true
                </simple>
            </recipientList>

            <convertBodyTo type="java.lang.String" charset="utf-8"/>
            <transform>
                <simple>${body.replace("'\n'", " / 2\n")}</simple>  <!-- the newline after the 2 needs to be there for the /usr/bin/bc exec command -->
            </transform>

            <!-- If ffprobe processing succeeded? -->
            <!-- Then find the middle of the video using /usr/bin/bc and Store video time position for thumbnail in header. -->
            <choice>
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>

                    <to uri="exec:/usr/bin/bc?args="/>
                    <convertBodyTo type="java.lang.String" charset="UTF-8"/>
                    <transform>
                        <simple>${body.replace("'\n'", "")}</simple>
                    </transform>

                    <!-- If ffprobe and /usr/bin/bc processing succeeded? -->
                    <!-- Store video time position for thumbnail in header. -->
                    <choice>
                        <when>
                            <simple>
                                ${headers.CamelExecExitValue} == 0
                            </simple>

                            <setHeader headerName="videoThumbnailTimePosition">
                                <simple>${body}</simple>
                            </setHeader>

                            <log message="${id} Derivatives: Adding video time position for thumbnail at ${header.videoThumbnailTimePosition}sec. to header."
                                 loggingLevel="DEBUG"
                                 logName="edu.si.derivatives"/>
                        </when>
                        <otherwise>
                            <log message="${id} Derivatives: Video thumbnail time position /usr/bin/bc calculation failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                                 loggingLevel="ERROR"/>
                        </otherwise>
                    </choice>
                </when>
                <otherwise>
                    <log message="${id} Derivatives: Video thumbnail time position processing failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>
            <log message="${id} Finished Derivatives Video thumbnail time position processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

        <route id="DerivativesProcessVideoThumbnail">
            <from uri="direct:processDerivativesVideoThumbnail"/>
            <log message="${id} Derivatives: Started Video Thumbnail processing..."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>

            <!-- Make an TN datastream. -->
            <!-- Create a video thumbnail using ffmpeg. -->
            <recipientList>
                <simple>
                    <!--exec:/usr/local/bin/ffmpeg?args=-ss ${header.videoThumbnailTimePosition} -i ${header.CamelFileNameProduced}.mp4 -vf thumbnail -frames:v 1 ${header.CamelFileNameProduced}-TN.jpg&amp;useStderrOnEmptyStdout=true-->
                    exec:/usr/local/bin/ffmpeg?args=-ss ${header.videoThumbnailTimePosition} -i ${header.videoInput} -vcodec mjpeg -vframes 1 -an -f rawvideo ${header.CamelFileNameProduced}-TN.jpg
                </simple>
                <!-- alt command that picks the best image for a thumbnail "ffmpeg -i - -vf thumbnail -frames:v 1 -" -->
            </recipientList>

            <choice>
                <!-- If ffmpeg thumbnail processing succeeded? Store an MP4 datastream on the FDO. -->
                <when>
                    <simple>
                        ${headers.CamelExecExitValue} == 0
                    </simple>

                    <setBody>
                        <simple>
                            ${header.CamelFileNameProduced}-TN.jpg
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>

                    <to uri="fedora:addDatastream?name=TN&amp;type=video/jpg&amp;dsLabel=TN&amp;group=M&amp;versionable=false"/>

                    <log message="${id} Derivatives: Adding Video Thumbnail To TN."
                         loggingLevel="DEBUG"
                         logName="edu.si.derivatives"/>
                </when>
                <otherwise>

                    <!-- creating video thumbnail failed set the thumbnail to the default video thumbnail -->
                    <setBody>
                        <simple>
                            Input/video-thumbnails/video.png
                        </simple>
                    </setBody>
                    <to uri="reader:file"/>
                    <to uri="fedora:addDatastream?name=TN&amp;type=video/jpg&amp;dsLabel=TN&amp;group=M&amp;versionable=false"/>

                    <log message="${id} Derivatives: Video Thumbnail Processing Failed. PID: ${headers.CamelFedoraPid}  Error Code: ${headers.CamelExecExitValue}"
                         loggingLevel="ERROR"/>
                </otherwise>
            </choice>

            <log message="${id} Finished Video Thumbnail processing."
                 loggingLevel="DEBUG"
                 logName="edu.si.derivatives"/>
        </route>

    </camelContext>
    
</blueprint>
