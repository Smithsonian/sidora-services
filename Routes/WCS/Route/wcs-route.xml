<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2015-2016 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
    xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <!-- The properties should not be changed from karaf or external cfg if there are deployments currently being ingested
        as it would cause the camel context to reload and error out any in-flight ingestion processes. -->
    <cm:property-placeholder id="sidora.karaf.properties" persistent-id="edu.si.sidora.karaf" update-strategy="none">
        <cm:default-properties>
            <cm:property name="si.ct.id" value="edu.si.wcsingest"/>
            <cm:property name="si.ct.wcs.dryrun" value="false"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <bean id="pidAggregator" class="edu.si.services.fedorarepo.aggregators.PidAggregationStrategy"/>

    <bean id="noRootObject" class="java.lang.IllegalArgumentException">
        <argument value="Root object does not exist."/>
    </bean>

    <bean id="noImageSequence" class="java.lang.IllegalArgumentException">
        <argument value="Image sequence does not exist."/>
    </bean>

    <bean id="validationFailure" class="java.lang.IllegalArgumentException">
        <argument value="Schematron validation failed."/>
    </bean>

    <bean id="cameraTrapRoutes" class="edu.si.services.beans.cameratrap.CameraTrapRouteBuilder"/>

    <bean id="velocityToolsHandler" class="edu.si.services.beans.velocityToolsHandler.VelocityToolsHandler"/>

    <bean id="saxonFactory" class="net.sf.saxon.TransformerFactoryImpl"/>

    <bean id="deploymentPkgValidator" class="edu.si.services.beans.cameratrap.DeploymentPackageValidator"/>

    <bean id="cameraTrapStaticStore" class="edu.si.services.beans.cameratrap.CameraTrapStaticStore"/>
    <!-- errorHandlerRef="wcsingestErrorHandler" -->

    <!-- processsor used during fedora findObject redelivery attempts to check for in-flight process-->
    <bean id="inFlightConceptCheckProcessor" class="edu.si.services.beans.cameratrap.InFlightConceptCheckProcessor"/>

    <bean id="postIngestionValidator" class="edu.si.services.beans.cameratrap.PostIngestionValidator"/>

    <bean id="cameraTrapValidationMessage" class="edu.si.services.beans.cameratrap.CameraTrapValidationMessage"/>

    <bean id="fcrepoConfiguration" class="edu.si.services.camel.fcrepo.FcrepoConfiguration">
        <property name="fedoraHost" value="${si.fedora.host}"/>
        <property name="authUsername" value="${si.fedora.user}"/>
        <property name="authPassword" value="${si.fedora.password}"/>
    </bean>

    <bean id="cameraTrapValidationMessageAggregationStrategy" class="edu.si.services.beans.cameratrap.CameraTrapValidationMessageAggregationStrategy"/>

    <bean id="deploymentPackageProcessFilter" class="edu.si.services.beans.cameratrap.DeploymentPackageProcessFilter"/>

    <bean id="unitOfWorkFactory" class="edu.si.services.beans.cameratrap.CameraTrapUnitOfWorkFactory"/>

    <bean id="fusekiHttpHeaderFilterStrategy" class="org.apache.camel.impl.DefaultHeaderFilterStrategy">
        <property name="outFilter">
            <set>
                <value>ManifestXML</value>
                <value>CamelSchematronValidationReport</value>
                <value>Content-Type</value>
            </set>
        </property>
    </bean>

    <bean id="dataDirRollback" class="edu.si.services.beans.cameratrap.FailedDeploymentDataDirRollback"/>

    <!-- errorHandlerRef="ctingestErrorHandler" -->

    <camelContext id="WCSIngestCamelContext"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:objDatastreams="http://www.fedora.info/definitions/1/0/access/"
                  xmlns:findObjects="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:ri="http://www.w3.org/2005/sparql-results#"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fedora="info:fedora/fedora-system:def/relations-external#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:eac="urn:isbn:1-931666-33-4"
                  xmlns:mods="http://www.loc.gov/mods/v3"
                  trace="false" useMDCLogging="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xsi:schemaLocation="http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.1.xsd">

        <!--
          The "unused" namespace definitions above are needed to deal with the way Camel handles namespaces in XPath.
        -->
        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:sidora.karaf.properties,file:${karaf.home}/etc/system.properties"/>

        <!--
        <errorHandler id="wcsingestErrorHandler" type="DefaultErrorHandler">
            <redeliveryPolicy maximumRedeliveries="20"
                              retryAttemptedLogLevel="WARN"
                              backOffMultiplier="2"
                              useExponentialBackOff="true"/>
        </errorHandler>
        -->

        <!-- This is not a globally scoped errorHandler -->
        <errorHandler id="noErrorHandler" type="NoErrorHandler" />

        <routeBuilder ref="cameraTrapRoutes"/>

        <onException>
            <exception>java.net.ConnectException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="{{si.ct.connEx.redeliveryDelay}}"
                              maximumRedeliveries="200"
                              retryAttemptedLogLevel="WARN"/>
        </onException>

        <onException>
            <exception>java.io.FileNotFoundException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="{{si.ct.FNF.redeliveryDelay}}"
                              maximumRedeliveries="5"
                              retryAttemptedLogLevel="WARN"/>
        </onException>

        <onException useOriginalMessage="true" onRedeliveryRef="inFlightConceptCheckProcessor">
            <exception>edu.si.services.fedorarepo.FedoraObjectNotFoundException</exception>
            <redeliveryPolicy useExponentialBackOff="true"
                              backOffMultiplier="2"
                              redeliveryDelay="{{si.ct.inflight.redeliveryDelay}}"
                              maximumRedeliveries="7"
                              retryAttemptedLogLevel="WARN"
                              retriesExhaustedLogLevel="WARN"
                              logExhaustedMessageHistory="false"/>
            <continued>
                <constant>true</constant>
            </continued>
        </onException>

        <!--
        <onException id="thumbnailError">
            <exception>javax.imageio.IIOException</exception>
            <redeliveryPolicy maximumRedeliveries="0"/>
            <continued>
                <constant>
                    true
                </constant>
            </continued>
        </onException>
        -->

        <route id="WCSStartProcessing">
            <from uri="file:{{karaf.home}}/ProcessWCS?delay=9000&amp;moveFailed=${bean:dataDirRollback.dataDirRollback(*, Error-WCS/${file:onlyname})}&amp;move=Done&amp;maxMessagesPerPoll=1"/>
            <log message="${id}: Starting WCS processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Needed for the Velocity tools. -->
            <setHeader headerName="esc">
                <method ref="velocityToolsHandler" method="getVelocityEscapeTool"/>
            </setHeader>

            <!--If there is an issue with staging large archives we can can 'slow' down the route with delay below. -->
            <delay>
                <constant>6000</constant>
            </delay>

            <log message="${id}: Starting Extraction"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
            <to uri="extractor:extract?location={{karaf.home}}/WCSData"/>
            <log message="${id}: Finished Extraction"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="deploymentDataDir">
                <simple>
                    ${header.CamelFileAbsolutePath}
                </simple>
            </setHeader>
            <log message="${id}: AbsolutePath - ${header.CamelFileAbsolutePath}"
                 loggingLevel="WARN"
                 logName="{{si.ct.id}}"/>

            <threads poolSize="3" maxPoolSize="5">

                <!--If there is an issue with staging large archives we can can 'slow' down the route with delay below. -->
                <delay>
                    <constant>1000</constant>
                </delay>

                <transform>
                    <simple>deployment_manifest.xml</simple>
                </transform>

                <to uri="reader:file?type=text"/>

                <log message="${id}: Body - ${body}"
                     loggingLevel="WARN"
                     logName="{{si.ct.id}}"/>

                <!-- Validate against the XSD. -->
                <to uri="validator:file:{{karaf.home}}/Input/schemas/Unified_WCSDeploymentManifest.xsd"/>

                <!-- Schematron validation. -->
                <to uri="schematron:file:{{karaf.home}}/Input/schemas/Unified_WCSDeploymentManifest.sch"/>
                <log message="${id}: Schematron Validation Status - ${header.CamelSchematronValidationStatus}"
                     loggingLevel="INFO"
                     logName="{{si.ct.id}}"/>
                <choice>
                    <when>
                        <simple>${in.header.CamelSchematronValidationStatus} == 'FAILED'</simple>
                        <log message="${id}: Schematron Validation Status - ${header.CamelSchematronValidationStatus}"
                             loggingLevel="WARN"
                             logName="{{si.ct.id}}"/>
                        <log message="${id}: Schematron Validation Report -\n ${header.CamelSchematronValidationReport}"
                             loggingLevel="WARN"
                             logName="{{si.ct.id}}"/>
                        <throwException ref="validationFailure"/>
                    </when>
                    <otherwise>
                        <log message="${id}: Schematron validation succeeded."
                             loggingLevel="INFO"
                             logName="{{si.ct.id}}"/>
                    </otherwise>
                </choice>

                <!-- Add image count and filename check. -->
                <setHeader headerName="ManifestXML">
                    <simple>
                        ${body}
                    </simple>
                </setHeader>

                <!-- Validate image count and check filenames. -->
                <to uri="direct:validatePackage"/>

                <log message="${id}: Ingest dry-run flag - {{si.ct.wcs.dryrun}}"
                     loggingLevel="DEBUG"
                     logName="{{si.ct.id}}"/>

                <choice>
                    <when>
                        <simple>{{si.ct.wcs.dryrun}} == true</simple>
                        <log message="${id}: Ingestion dryrun mode is enabled.. skipping the actual ingestion process"
                             loggingLevel="INFO"
                             logName="{{si.ct.id}}"/>
                    </when>
                    <otherwise>
                        <!-- Process the deployment -->
                        <to uri="direct:processPackage"/>

                        <!-- Delay some time for Fedora to catch up with RI sync before starting post validation-->
                        <log message="${id}: Delaying for moment before starting the post ingest validation ..."
                             loggingLevel="INFO"
                             logName="{{si.ct.id}}"/>
                        <delay>
                            <constant>6000</constant>
                        </delay>

                        <!-- Validate image count and check filenames. -->
                        <to uri="direct:validateIngest"/>
                    </otherwise>
                </choice>
            </threads>

            <log message="${id}: Finished WCS processing!"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSValidatePackage">
            <from uri="direct:validatePackage"/>
            <log message="${id}: Starting Package validation ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="ResourceFileType">
                <simple resultType="java.lang.String">
                    .JPG, .JPEG
                </simple>
            </setHeader>
            <setHeader headerName="ResourceCount">
                <xpath resultType="java.lang.Integer">
                    count(//ImageFileName)
                </xpath>
            </setHeader>
            <to uri="bean:deploymentPkgValidator?method=validateResourceCount"/>
            <!--  Keeping the validator result in the header to allow the rest of the validation to go through and raise exception at the end of route. -->
            <setHeader headerName="ValidateResourceCountResult">
                <simple resultType="java.lang.Integer">
                    ${body}
                </simple>
            </setHeader>

            <split>
                <xpath headerName="ManifestXML">
                    //ImageFileName/text()
                </xpath>
                <log message="${id}: Split Resource - ${body}"
                     loggingLevel="DEBUG"
                     logName="{{si.ct.id}}"/>
                <setHeader headerName="ImageFileName">
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setHeader>
                <setHeader headerName="ImageSequenceID">
                    <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                        //ImageFileName[text()=$ImageFileName]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                    </xpath>
                </setHeader>
                <log message="${id}: ImageSequenceID - ${header.ImageSequenceID}"
                     loggingLevel="DEBUG"
                     logName="{{si.ct.id}}"/>
                <!-- This throws a java.io.FileNotFoundException if the file does not exist. -->
                <to uri="reader:file"/>
                <log message="${id}: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="DEBUG"
                     logName="{{si.ct.id}}"/>
                <!-- We should check the image count to see if it exactly matches the image file count. -->
            </split>

            <!-- This throws custom exception when the resource count validator was unsuccessful. -->
            <choice>
                <when>
                    <simple>${header.ValidateResourceCountResult} == '0'</simple>
                    <throwException exceptionType="edu.si.services.beans.cameratrap.DeploymentPackageException"
                                    message="The resource counts do not match - extra resource(s) found in the file system than manifest"/>
                </when>
                <when>
                    <simple>${header.ValidateResourceCountResult} == '-1'</simple>
                    <throwException exceptionType="edu.si.services.beans.cameratrap.DeploymentPackageException"
                                    message="The resource counts do not match - less resource(s) found in the file system than manifest"/>
                </when>
            </choice>

            <log message="${id}: Finished Package validation."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSValidateIngest">
            <from uri="direct:validateIngest"/>

            <log message="${id}: Starting Post validation ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="ValidationErrors">
                <simple>
                    ValidationErrors
                </simple>
            </setHeader>

            <to uri="direct:validatePostIngestResourceCount"/>

            <!-- validate datastreams exists for various object types -->
            <to uri="direct:validateDatastreams"/>

            <!-- Validate Ingest Datastream Metadata Fields -->
            <to uri="direct:validateDatastreamFields"/>

            <log message="${id}: Finished Post validation"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSValidatePostIngestResourceCount">
            <from uri="direct:validatePostIngestResourceCount"/>
            <log message="${id}: Starting Post Ingestion Resource Count validations..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- RELS-EXT Resource reference count for validation.  The number includes the observation resource objs-->
            <setHeader headerName="RelsExtResourceCount">
                <xpath resultType="java.lang.String">
                    count(/rdf:RDF/rdf:Description/fedora:hasResource)
                </xpath>
            </setHeader>
            <to uri="direct:validatePostResourceCount"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${headers.SitePID}
                </simple>
            </setHeader>
            <to uri="fedora://getDatastreamDissemination?dsId=RELS-EXT&amp;exchangePattern=InOut"/>

            <split streaming="true">
                <xtokenize>//fedora:hasResource</xtokenize>
                <!-- Stashing the resource object PID in the header in case of RI search redelivery attempts for later use-->
                <setHeader headerName="ValidationResourceObjectPID">
                    <xpath resultType="java.lang.String">
                        //fedora:hasResource/@rdf:resource/substring-after(., 'info:fedora/')
                    </xpath>
                </setHeader>

                <!-- This api will query Fedora relational db and PID is the only indexed field.  There may be performance impact if the query search includes more than PID-->
                <toD uri="fcrepo:objects?query=pid%7E${header.ValidationResourceObjectPID}&amp;pid=true&amp;resultFormat=xml"/>

                <choice>
                    <when>
                        <xpath resultType="java.lang.String">
                            not(//findObjects:objectFields/findObjects:pid/text())
                        </xpath>

                        <to uri="bean:cameraTrapValidationMessage?method=createValidationMessage(${header.CamelFileParent}, ${header.ValidationResourceObjectPID}
                            ,'Resource Object not found from Fedora Repository', ${body})"/>
                        <to uri="direct:validationErrorMessageAggregationStrategy"/>
                        <log message="${id}: Resource Object not found from Fedora Repository"
                             loggingLevel="WARN"
                             logName="{{si.ct.id}}"/>
                    </when>
                </choice>

                <log message="${id}: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="{{si.ct.id}}"/>
            </split>

            <log message="${id}: Finished Post Ingestion Resource Count validations."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSValidateDatastreams">
            <from uri="direct:validateDatastreams"/>
            <log message="${id}: Starting Datastream validations..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Project is required for WCS-->
            <!-- Subproject is optional for WCS. -->
            <!-- Plot is optional for WCS -->
            <!-- Researcher is required for WCS. -->
            <!-- Volunteer is optional for WCS. -->
            <!-- Image is required for WCS. -->


            <!-- Validate Project Object datastreams -->
            <setHeader headerName="ValidationDatastreamObjectType">
                <simple>
                    Project
                </simple>
            </setHeader>
            <setHeader headerName="ValidationDatastreamObjectPID">
                <simple>
                    ${headers.ProjectPID}
                </simple>
            </setHeader>
            <setHeader headerName="DatastreamTypesCheck">
                <simple resultType="java.lang.String">
                    DC, EAC-CPF, RELS-EXT
                </simple>
            </setHeader>
            <to uri="direct:validateObjectDatastreams"/>

            <!-- Validate SubProject Object datastreams -->
            <choice>
                <when>
                    <header>SubProjectPID</header>
                    <setHeader headerName="ValidationDatastreamObjectType">
                        <simple>
                            SubProject
                        </simple>
                    </setHeader>
                    <setHeader headerName="ValidationDatastreamObjectPID">
                        <simple>
                            ${headers.SubProjectPID}
                        </simple>
                    </setHeader>
                    <setHeader headerName="DatastreamTypesCheck">
                        <simple resultType="java.lang.String">
                            DC, FGDC-Research, RELS-EXT
                        </simple>
                    </setHeader>
                    <to uri="direct:validateObjectDatastreams"/>
                </when>
            </choice>

            <!-- Validate Plot Object datastreams -->
            <choice>
                <when>
                    <header>PlotPID</header>
                    <setHeader headerName="ValidationDatastreamObjectType">
                        <simple>
                            Plot
                        </simple>
                    </setHeader>
                    <setHeader headerName="ValidationDatastreamObjectPID">
                        <simple>
                            ${headers.PlotPID}
                        </simple>
                    </setHeader>
                    <setHeader headerName="DatastreamTypesCheck">
                        <simple resultType="java.lang.String">
                            DC, FGDC-CTPlot, RELS-EXT
                        </simple>
                    </setHeader>
                    <to uri="direct:validateObjectDatastreams"/>
                </when>
            </choice>

            <!-- Validate Deployment Object datastreams -->
            <setHeader headerName="ValidationDatastreamObjectType">
                <simple>
                    Deployment
                </simple>
            </setHeader>
            <setHeader headerName="ValidationDatastreamObjectPID">
                <simple>
                    ${headers.SitePID}
                </simple>
            </setHeader>
            <setHeader headerName="DatastreamTypesCheck">
                <simple resultType="java.lang.String">
                    DC, MANIFEST, FGDC, RELS-EXT
                </simple>
            </setHeader>
            <to uri="direct:validateObjectDatastreams"/>

            <!-- Validate Image Resource Object datastreams -->
            <setHeader headerName="ValidationDatastreamObjectType">
                <simple>
                    Image Resource
                </simple>
            </setHeader>
            <setHeader headerName="ValidationDatastreamObjectPID">
                <simple>
                    ${headers.ImageResourcePID}
                </simple>
            </setHeader>
            <setHeader headerName="DatastreamTypesCheck">
                <simple resultType="java.lang.String">
                    DC, OBJ, TN, RELS-EXT, FITS, MODS
                </simple>
            </setHeader>
            <to uri="direct:validateObjectDatastreams"/>

            <!-- Validate Researcher Observation Object datastreams -->
            <setHeader headerName="ValidationDatastreamObjectType">
                <simple>
                    Researcher Observation
                </simple>
            </setHeader>
            <setHeader headerName="ValidationDatastreamObjectPID">
                <simple>
                    ${headers.ResearcherObservationPID}
                </simple>
            </setHeader>
            <setHeader headerName="DatastreamTypesCheck">
                <simple resultType="java.lang.String">
                    DC, OBJ, CSV, RELS-EXT, FGDC
                </simple>
            </setHeader>
            <to uri="direct:validateObjectDatastreams"/>

            <!-- Validate Volunteer Observation Object datastreams -->
            <choice>
                <when>
                    <header>VolunteerObservationPID</header>
                    <setHeader headerName="ValidationDatastreamObjectType">
                        <simple>
                            Volunteer Observation
                        </simple>
                    </setHeader>
                    <setHeader headerName="ValidationDatastreamObjectPID">
                        <simple>
                            ${headers.VolunteerObservationPID}
                        </simple>
                    </setHeader>
                    <setHeader headerName="DatastreamTypesCheck">
                        <simple resultType="java.lang.String">
                            DC, OBJ, CSV, RELS-EXT, FGDC
                        </simple>
                    </setHeader>
                    <to uri="direct:validateObjectDatastreams"/>
                </when>
            </choice>

            <!-- Validate Image Observation Object datastreams -->
            <choice>
                <when>
                    <header>ImageObservationPID</header>
                    <setHeader headerName="ValidationDatastreamObjectType">
                        <simple>
                            Image Observation
                        </simple>
                    </setHeader>
                    <setHeader headerName="ValidationDatastreamObjectPID">
                        <simple>
                            ${headers.ImageObservationPID}
                        </simple>
                    </setHeader>
                    <setHeader headerName="DatastreamTypesCheck">
                        <simple resultType="java.lang.String">
                            DC, OBJ, CSV, RELS-EXT, FGDC
                        </simple>
                    </setHeader>
                    <to uri="direct:validateObjectDatastreams"/>
                </when>
            </choice>

            <log message="${id}: Finished Datastream validations."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSValidateObjectDatastreams">
            <from uri="direct:validateObjectDatastreams"/>
            <log message="${id}: Starting ${header.ValidationDatastreamObjectType} Object Datastream validations..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="CamelHttpMethod">
                <simple>
                    GET
                </simple>
            </setHeader>

            <toD uri="fcrepo:objects/${header.ValidationDatastreamObjectPID}/datastreams?format=xml"/>

            <choice>
                <when>
                    <simple>${header.CamelHttpResponseCode} == 200</simple>

                    <setHeader headerName="FedoraDatastreamIDsFound">
                        <xpath resultType="java.lang.String">
                            string-join(//objDatastreams:datastream/@dsid,',')
                        </xpath>
                    </setHeader>

                    <to uri="bean:postIngestionValidator?method=validateDatastreamExists"/>

                    <choice>
                        <when>
                            <simple>${body} == false</simple>
                            <to uri="bean:cameraTrapValidationMessage?method=createValidationMessage(${header.CamelFileParent},
                                    '${header.ValidationDatastreamObjectType} Object Datastreams validation failed', ${body})"/>
                            <to uri="direct:validationErrorMessageAggregationStrategy"/>
                            <log message="${id}: ${header.ValidationDatastreamObjectType} Object Datastreams validation failed - ${body}"
                                 loggingLevel="WARN"
                                 logName="{{si.ct.id}}"/>
                        </when>
                    </choice>
                </when>

                <otherwise>
                    <to uri="bean:cameraTrapValidationMessage?method=createValidationMessage(${header.CamelFileParent},
                            '${header.ValidationDatastreamObjectType} Object with PID - ${header.ValidationDatastreamObjectPID} not found in Fedora.. skipping datastreams validation', false)"/>
                    <to uri="direct:validationErrorMessageAggregationStrategy"/>
                    <log message="${id}: ${header.ValidationDatastreamObjectType} Object with PID - ${header.ValidationDatastreamObjectPID} not found in Fedora.. skipping datastreams validation"
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished ${header.ValidationDatastreamObjectType} Object Datastream validations."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessPackage">
            <from uri="direct:processPackage"/>
            <log message="${id}: Starting Package processing..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <to uri="direct:processParents"/>
            <to uri="direct:processSite"/>

            <log message="${id}: Finished Package processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessSite">
            <from uri="direct:processSite"/>
            <log message="${id}: Starting Site processing... "
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Stash the parent PID which could be a Plot or a Sub-project. -->
            <setHeader headerName="ParentPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <setHeader headerName="DeploymentCorrelationId">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //CameraDeploymentID
                </xpath>
            </setHeader>
            <setHeader headerName="CamelFedoraLabel">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //CameraSiteName
                </xpath>
            </setHeader>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
            <log message="${id}: Add Relation: Parent PID - ${header.ParentPID} Child PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
            <log message="${id}: Add Relation: Status - ${header.CamelFedoraStatus}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <multicast>
                <to uri="direct:addManifestDataStream"/>
                <to uri="direct:addFGDCDataStream"/>
                <to uri="direct:processResources"/>
            </multicast>

            <log message="${id}: Finished Site processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddManifestDataStream">
            <from uri="direct:addManifestDataStream"/>
            <log message="${id}: Starting Manifest processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <to uri="fedora:addDatastream?name=MANIFEST&amp;type=text/xml&amp;group=M&amp;dsLabel=MANIFEST"/>

            <log message="${id}: Finished Manifest processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddFGDCDataStream">
            <from uri="direct:addFGDCDataStream"/>
            <log message="${id}: Starting FGDC processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestDeployment.xsl?saxon=true"/>
            <to uri="fedora:addDatastream?name=FGDC&amp;type=text/xml&amp;group=M&amp;dsLabel=FGDC%20Record"/>

            <log message="${id}: Finished FGDC processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessResources">
            <from uri="direct:processResources"/>
            <log message="${id}: Starting resource processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="SitePID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <setHeader headerName="SiteId">
                <simple>
                    ${header.DeploymentCorrelationId}
                </simple>
            </setHeader>
            <setHeader headerName="SiteName">
                <simple>
                    ${header.CamelFedoraLabel}
                </simple>
            </setHeader>
            <setHeader headerName="ImageCount">
                <xpath resultType="java.lang.String">
                    count(//ImageFileName)
                </xpath>
            </setHeader>
            <log message="${id}: Site PID - ${header.SitePID}  Image Count - ${header.ImageCount}"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- There may be several kinds of resources with zero or more instances. -->
            <split strategyRef="pidAggregator">
                <xpath headerName="ManifestXML">
                    //ImageFileName/text()
                </xpath>
                <log message="${id}: Split Resource - ${body}"
                     loggingLevel="INFO"
                     logName="{{si.ct.id}}"/>
                <setBody>
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setBody>
                <to uri="direct:addImageResource"/>
                <log message="${id}: Created Image Resource - ${body}."
                     loggingLevel="DEBUG"
                     logName="{{si.ct.id}}"/>
                <log message="${id}: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="{{si.ct.id}}"/>
            </split>

            <!-- There is only one observation resource of each kind and all the observations are aggregated. -->

            <!-- Researcher is required for WCS. -->
            <to uri="direct:addResearcherObservationResource"/>

            <!-- Volunteer is optional for WCS. -->
            <filter>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    boolean(//VolunteerIdentifications/Identification/IUCNId/text()[1])
                </xpath>
                <to uri="direct:addVolunteerObservationResource"/>
            </filter>

            <!-- Image is required for WCS. -->
            <to uri="direct:addImageObservationResource"/>

            <!-- Add the RELS-EXT datastream in one operation to gain about 70% of the total efficiency. -->
            <to uri="velocity:file:{{karaf.home}}/Input/templates/CTSiteTemplate.vsl"/>
            <toD uri="fedora:addDatastream?pid=${header.SitePID}&amp;name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <log message="${id}: Finished resource processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddImageResource" trace="true">
            <from uri="direct:addImageResource"/>
            <log message="${id}: Started Image processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!--
            <setHeader headerName="ImageID">
                <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                    //ImageFileName[text()=$in:body]/parent::Image/ImageId/text()
                </xpath>
            </setHeader>
            -->
            <!-- Spelled this way for the MODS XSLT parameter. -->
            <setHeader headerName="imageid">
                <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                    //ImageFileName[text()=$in:body]/parent::Image/ImageId/text()
                </xpath>
            </setHeader>

            <!-- Image Sequence ID used in MODS datastream. -->
            <!--
            <setHeader headerName="ImageSequenceID">
                <xpath logNamespaces="false" resultType="java.lang.String" headerName="ManifestXML">
                    //ImageFileName[text()=$in:body]/parent::Image/parent::ImageSequence/ImageSequenceId/text()
                </xpath>
            </setHeader>
            -->
            <setHeader headerName="ImageSequenceIndex">
                <xpath logNamespaces="false" resultType="java.lang.Integer" headerName="ManifestXML">
                    //ImageFileName[text()=$in:body]/parent::Image/ImageOrder/text()
                </xpath>
            </setHeader>
            <choice>
                <when>
                    <simple>
                        ${header.ImageSequenceIndex} == ''
                    </simple>
                    <!-- Stop processing this deployment. -->
                    <log message="${id}: Image sequence does not exist."
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>
                    <throwException ref="noImageSequence"/>
                </when>
            </choice>

            <!--
            <setHeader headerName="ImageSequenceCount">
                <xpath logNamespaces="false" resultType="java.lang.Integer" headerName="ManifestXML">
                    count(//Image[../ImageSequenceId=$ImageSequenceID])
                </xpath>
            </setHeader>
            <log message="${id}: Label - ${body}  ImageID - ${header.imageid}  ImageSequenceIndex - ${header.ImageSequenceIndex}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <log message="${id}: Label - ${body}  ImageSequenceID - ${header.ImageSequenceID}  ImageSequenceCount - ${header.ImageSequenceCount}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            -->
            <to uri="reader:file"/>

            <toD uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=${header.imageid}"/>

            <toD uri="fedora:addDatastream?name=OBJ&amp;type=image/jpeg&amp;group=M&amp;dsLabel=${header.imageid}&amp;versionable=false"/>

            <!--<multicast>-->
            <to uri="direct:createThumbnail"/>
            <!-- <to uri="direct:createArchivalImage" /> -->
            <!-- We may also want a DISPLAY datastream. -->
            <!--</multicast>-->
            <to uri="velocity:file:{{karaf.home}}/Input/templates/CTImageResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
            <to uri="direct:addFITSDataStream"/>
            <to uri="direct:addMODSDataStream"/>

            <!-- We only want to validate one ImageSequenceId so use a Filter on the CamelSplitIndex from the split in
                the processResources calling the addMODSDatastream to get the PID for the first MODS datastream being created -->
            <filter>
                <simple>
                    ${property.CamelSplitIndex} &lt;= 0
                </simple>
                <setHeader headerName="ImageResourcePID">
                    <simple>
                        ${header.CamelFedoraPid}
                    </simple>
                </setHeader>
            </filter>

            <!-- The current route only handles JPG. -->
            <choice>
                <!-- If the image is a JPEG? Do nothing. -->
                <when>
                    <simple>
                        ${header.dsMIME} == 'image/jpg' || ${header.dsMIME} == 'image/jpeg' || ${header.dsMIME} == 'image/jpe'
                    </simple>
                    <log message="${id}: Derivatives: Found JPEG."
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <!-- Future: Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                </when>
                <!-- Just warn for now. -->
                <otherwise>
                    <log message="${id}: Derivatives: Found non-JPEG Image."
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished Image processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddResearcherObservationResource">
            <from uri="direct:addResearcherObservationResource"/>
            <log message="${id}: Starting Researcher Observation data processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- For Researcher observations. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=Researcher%20Observations"/>
            <log message="${id}: Research Observation Resource PID - ${header.CamelFedoraPid}"
                    loggingLevel="DEBUG"
                    logName="{{si.ct.id}}"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="${id}: Aggregation: ${header.PIDAggregation}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ResearcherObservation.xsl"/>
            <log message="${id}: Researcher Observations - \n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <transform>
                <xpath>
                    //researcher/text()
                </xpath>
            </transform>
            <convertBodyTo type="java.lang.String"/>

            <toD uri="fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=Researcher%20Observations&amp;versionable=false"/>

            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:{{karaf.home}}/Input/templates/CTDatasetResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <!-- This is a quick fix but it is not elegant to fetch the manifest again to transform it. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>

            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestResearcherObservation.xsl?saxon=true"/>

            <log message="${id}: FGDC XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <to uri="fedora:addDatastream?name=FGDC&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC%20Record"/>

            <setHeader headerName="ResourceCount">
                <simple>${header.ResourceCount}++</simple>
            </setHeader>

            <setHeader headerName="ResearcherObservationPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>

            <log message="${id}: Finished Researcher Observation data processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddVolunteerObservationResource">
            <from uri="direct:addVolunteerObservationResource"/>
            <log message="${id}: Starting Volunteer Observation data processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- For Volunteer observations. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=Volunteer%20Observations"/>
            <log message="${id}: Volunteer Observation Resource PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="${id}: Aggregation: ${header.PIDAggregation}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="xslt:file:{{karaf.home}}/Input/xslt/VolunteerObservation.xsl"/>
            <log message="${id}: Volunteer Observations - \n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <transform>
                <xpath>
                    //volunteer/text()
                </xpath>
            </transform>
            <convertBodyTo type="java.lang.String"/>

            <toD uri="fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=Volunteer%20Observations&amp;versionable=false"/>

            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:{{karaf.home}}/Input/templates/CTDatasetResourceTemplate.vsl" />
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <!-- This is a quick fix but it is not elegant to fetch the manifest again to transform it. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestVolunteerObservation.xsl?saxon=true"/>
            <log message="${id}: FGDC XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="fedora:addDatastream?name=FGDC&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC%20Record"/>

            <setHeader headerName="ResourceCount">
                <simple>${header.ResourceCount}++</simple>
            </setHeader>

            <setHeader headerName="VolunteerObservationPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>

            <log message="${id}: Finished Volunteer Observation data processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddImageObservationResource">
            <from uri="direct:addImageObservationResource"/>
            <log message="${id}: Starting Image Observation data processing ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- For Image observations. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}&amp;label=Image%20Observations"/>
            <log message="${id}: Image Observation Resource PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <setHeader headerName="PIDAggregation">
                <simple>${header.PIDAggregation},${header.CamelFedoraPid}</simple>
            </setHeader>
            <log message="${id}: Aggregation: ${header.PIDAggregation}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ImageObservation.xsl"/>
            <log message="${id}: Image Observations - \n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <transform>
                <xpath>
                    //image/text()
                </xpath>
            </transform>
            <convertBodyTo type="java.lang.String"/>

            <toD uri="fedora:addDatastream?name=OBJ&amp;type=text/csv&amp;group=M&amp;dsLabel=Image%20Observations&amp;versionable=false"/>

            <to uri="fedora:addDatastream?name=CSV&amp;type=text/csv&amp;group=M&amp;dsLabel=CSV&amp;versionable=false"/>
            <to uri="velocity:file:{{karaf.home}}/Input/templates/CTDatasetResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <!-- This is a quick fix but it is not elegant to fetch the manifest again to transform it. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestImageObservation.xsl?saxon=true"/>
            <log message="${id}: FGDC XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="fedora:addDatastream?name=FGDC&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC%20Record"/>

            <setHeader headerName="ResourceCount">
                <simple>${header.ResourceCount}++</simple>
            </setHeader>

            <setHeader headerName="ImageObservationPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>

            <log message="${id}: Finished Image Observation data processing."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddFITSDataStream">
            <from uri="direct:addFITSDataStream"/>
            <log message="${id}: Started processing FITS ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileAbsolutePath}
                </simple>
            </recipientList>
            <choice>
                <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
                <when>
                    <simple>
                        ${header.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id}: FITS MIME: ${header.FITSmimeType}"
                             loggingLevel="DEBUG"
                             logName="{{si.ct.id}}"/>
                    </setHeader>
                    <log message="${id}: Exec FITS. BODY: ${body}"
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>
                </when>
                <otherwise>
                    <log message="${id}: FITS processing failed. PID: ${header.CamelFedoraPid}  Error Code: ${header.CamelExecExitValue}"
                         loggingLevel="ERROR"
                         logName="{{si.ct.id}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished processing FITS."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSAddMODSDataStream">
            <from uri="direct:addMODSDataStream"/>
            <log message="${id}: Started processing MODS ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Get the FITS XML and use XPATH to get the created date from it. -->
            <!--
            <setHeader headerName="FITSCreatedDate">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    //fits:fileinfo/fits:created[@toolname="Exiftool"]
                </xpath>
            </setHeader>
            <log message="${id}: MODS FITS Created Date - ${header.FITSCreatedDate}"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
            -->

            <!-- TODO - The Image ID has .JPG appended and we may want to make this consistent. -->
            <!-- Add a MODS datastream for concept metadata. -->
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestImage.xsl?saxon=true"/>
            <log message="${id}: MODS XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="fedora:addDatastream?name=MODS&amp;type=text/xml&amp;group=X&amp;dsLabel=MODS%20Record"/>

            <log message="${id}: Finished processing MODS."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSCreateThumbnailImage">
            <from uri="direct:createThumbnail"/>
            <log message="${id}: Started creating thumbnail ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!--
            <onException>
                <exception>javax.imageio.IIOException</exception>
                <redeliveryPolicy maximumRedeliveries="0"/>
                <continued>
                    <constant>
                        true
                    </constant>
                </continued>
                <stop/>
            </onException>
            -->

            <doTry>
                <to uri="thumbnailator:image?keepRatio=true&amp;size=(200,150)"/>
                <to uri="fedora:addDatastream?name=TN&amp;type=image/jpeg&amp;group=M&amp;dsLabel=Thumbnail&amp;versionable=false"/>
                <doCatch>
                    <exception>javax.imageio.IIOException</exception>
                    <log message="${id}: Cannot create thumbnail image corrupted."
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>
                </doCatch>
            </doTry>

            <log message="${id}: Finished creating thumbnail."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSCreateArchivalImage">
            <from uri="direct:createArchivalImage"/>
            <log message="${id}: Started creating archival image ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!--
                NOTE: This is planned to be a JPEG 2000 but we are not doing it yet.
            <to uri="thumbnailator:image?quality=80%&amp;size=(2048,1536)"/>
            <to uri="file://WCSOutput/resample"/>
            -->

            <log message="${id}: Finished creating archival image."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessParents">
            <from uri="direct:processParents"/>
            <log message="${id}: Started processing parents ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <setBody>
                <simple>
                    {{si.ct.root}}
                </simple>
            </setBody>
            <!-- Check if the root exists, else quit. -->
            <to uri="direct:findObjectByPIDPredicate"/>
            <choice>
                <when>
                    <simple>
                        ${body} == 'true'
                    </simple>
                    <log message="${id}: Root object exists."
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            {{si.ct.root}}
                        </simple>
                    </setHeader>

                    <!-- Add the parents if needed. -->
                    <!-- Project is required, Project is required -->
                    <to uri="direct:processProject"/>

                    <!-- Subproject is optional for WCS. -->
                    <filter>
                        <xpath resultType="java.lang.String" headerName="ManifestXML">
                            boolean(//SubProjectName/text()[1])
                        </xpath>
                        <to uri="direct:processSubproject"/>
                    </filter>

                    <!-- Plot is optional. -->
                    <filter>
                        <xpath resultType="java.lang.String" headerName="ManifestXML">
                            boolean(//PlotName/text()[1])
                        </xpath>
                        <to uri="direct:processPlot"/>
                    </filter>

                    <!-- Clean stashed header that could potentially lock for inflight check during post validations-->
                    <removeHeader headerName="DeploymentCorrelationId"/>
                </when>
                <otherwise>
                    <!-- Stop processing this deployment. -->
                    <log message="${id}: Root object does not exist."
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>
                    <throwException ref="noRootObject"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished processing parents."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSFindObject" errorHandlerRef="noErrorHandler">
            <from uri="direct:findObject"/>
            <log message="${id}: Started find object ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
            <log message="${id}: Find: Label - ${body}  Parent - ${header.CamelFedoraPid}"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!--
            <transform>
                <simple>
                    ${body.replaceAll("'", "\'")}
                </simple>
            </transform>
            -->
            <!-- There is a bug in Camel that causes replaceAll to fail so I am using Groovy for now.  We
                 will want to remove this so we don't have to include the Groovy feature just for this.
                 The bug is fixed in newer versions of Camel.
            -->
            <transform>
                <groovy>
                    request.body.replace("'", "\\'")
                </groovy>
            </transform>

            <log message="${id}: Replace body - ${body}"
                 loggingLevel="WARN"
                 logName="{{si.ct.id}}"/>

            <setBody>
                <!-- The query needs to also check directly along the parent axis since names are not unique. -->
                <simple>
                    SELECT ?o FROM &lt;info:edu.si.fedora#ri&gt;
                    WHERE
                    {
                    ?o &lt;info:fedora/fedora-system:def/model#label&gt; '${body}' .
                    &lt;info:fedora/${header.CamelFedoraPid}&gt; &lt;info:fedora/fedora-system:def/relations-external#hasConcept&gt; ?o .
                    }
                </simple>
            </setBody>
            <!-- Converting the query above to URL encoded string to send over HTTP with GET method. -->
            <setBody>
                <groovy>
                    "query=" + URLEncoder.encode(request.getBody(String.class));
                </groovy>
            </setBody>

            <log message="${id}: Project Parent - ${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <setHeader headerName="CamelHttpQuery">
                <simple>
                    output=xml&amp;${body}
                </simple>
            </setHeader>
            <!-- Direct HTTP call to Fuseki endpoint due to having issue with setting the response type from FedoraClient/Fedora component. -->
            <toD uri="{{si.fuseki.endpoint}}?headerFilterStrategy=#fusekiHttpHeaderFilterStrategy"/>
            <convertBodyTo type="java.lang.String"/>

            <log message="${id}: Query Result - ${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <!-- Count the results. If greater than one warn about duplicate parents. -->
            <choice>
                <when>
                    <xpath>
                        count(/ri:sparql/ri:results/ri:result) > 1
                    </xpath>
                    <log message="${id}: Warning - Duplicate parents."
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>
                </when>
            </choice>
            <setBody>
                <xpath logNamespaces="false" resultType="java.lang.String">
                    substring-after(/ri:sparql/ri:results/ri:result[1]/ri:binding/ri:uri,'/')
                </xpath>
            </setBody>

            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <!-- Throw custom exception to trigger re-try attempts on search -->
                    <throwException exceptionType="edu.si.services.fedorarepo.FedoraObjectNotFoundException"
                                    message="The fedora object not found"/>
                </when>
            </choice>
            <log message="${id}: Finished find object."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSFindObjectByPIDPredicate" errorHandlerRef="noErrorHandler">
            <from uri="direct:findObjectByPIDPredicate"/>
            <log message="${id}: Started find object by PID ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Return true in the body if the object exists for the PID, false if not. -->
            <setBody>
                <simple>
                    ASK FROM &lt;info:edu.si.fedora#ri&gt;
                    {
                        &lt;info:fedora/${body}&gt; ?p ?o .
                    }
                </simple>
            </setBody>
            <!-- Converting the query above to URL encoded string to send over HTTP with GET method. -->
            <setBody>
                <groovy>
                    "query=" + URLEncoder.encode(request.getBody(String.class));
                </groovy>
            </setBody>

            <log message="${id}: Find Query - ${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <setHeader headerName="CamelHttpQuery">
                <simple>
                    output=xml&amp;${body}
                </simple>
            </setHeader>
            <!-- Direct HTTP call to Fuseki endpoint due to having issue with setting the response type from FedoraClient/Fedora component. -->
            <toD uri="{{si.fuseki.endpoint}}?headerFilterStrategy=#fusekiHttpHeaderFilterStrategy"/>
            <convertBodyTo type="java.lang.String"/>

            <log message="${id}: Find Query Result - ${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <setBody>
                <xpath logNamespaces="false" resultType="java.lang.String">
                    //ri:boolean/text()
                </xpath>
            </setBody>
            <choice>
                <when>
                    <simple>
                        ${body} == false
                    </simple>
                    <!-- Throw custom exception to trigger re-try attempts on search -->
                    <throwException exceptionType="edu.si.services.fedorarepo.FedoraObjectNotFoundException"
                                    message="The fedora object not found"/>
                </when>
            </choice>
            <log message="${id}: Find Object By PID - ${body}."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <log message="${id}: Finished find object by PID."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessPlot">
            <from uri="direct:processPlot"/>
            <log message="${id}: Started processing plot ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Look for the plot (its optional). -->
            <setBody>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    concat(//SubProjectName/text(), ':', //PlotName/text())
                </xpath>
            </setBody>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <!-- stash parent identifier to be used for the in-flight parent process checks. -->
            <setHeader headerName="DeploymentCorrelationId">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <log message="${id}: Plot: Label - ${body}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="direct:findObject" />
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id}: Plot does not exist"
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <!-- Stash the sub-project PID. -->
                    <setHeader headerName="ParentPID">
                        <simple>
                            ${header.CamelFedoraPid}
                        </simple>
                    </setHeader>
                    <!-- Create WCS CT plot and add it as a sub-concept of the sub-project -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project -->
                    <to uri="velocity:file:{{karaf.home}}/Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent WCS CT sub-project to the child WCS CT plot -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <!-- Add an FGDC-CTPlot datastream for concept metadata. -->
                    <setBody>
                        <simple>
                            ${header.ManifestXML}
                        </simple>
                    </setBody>
                    <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestPlot.xsl?saxon=true"/>
                    <to uri="fedora:addDatastream?name=FGDC-CTPlot&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC-CTPlot%20Record&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing plot as the current object. -->
                    <log message="${id}: Plot already exists - ${body}."
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <setHeader headerName="PlotPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>

            <log message="${id}: Finished processing plot."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessSubproject">
            <from uri="direct:processSubproject"/>
            <log message="${id}: Started processing subproject ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Look for the sub-project. -->
            <setBody>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //SubProjectName
                </xpath>
            </setBody>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <!-- stash subproject identifier to be used for the in-flight parent process checks. -->
            <setHeader headerName="DeploymentCorrelationId">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //SubProjectId
                </xpath>
            </setHeader>
            <log message="${id}: Sub-project: Label - ${body}  Parent PID - ${header.CamelFedoraPid}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="direct:findObject" />
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id}: Sub-project does not exist"
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <!-- Stash the Project PID. -->
                    <setHeader headerName="ParentPID">
                        <simple>
                            ${header.CamelFedoraPid}
                        </simple>
                    </setHeader>
                    <!-- Create WCS CT sub-project and add it as a sub-concept of the project. -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the sub-project -->
                    <to uri="velocity:file:{{karaf.home}}/Input/templates/CTPlotTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent WCS CT project to the child WCS CT sub-project -->
                    <to uri="fedora:hasConcept?parentPid=${header.ParentPID}&amp;childPid=${header.CamelFedoraPid}"/>
                    <!-- Add an FGDC-Research datastream for concept metadata. -->
                    <setBody>
                        <simple>
                            ${header.ManifestXML}
                        </simple>
                    </setBody>
                    <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestSubproject.xsl?saxon=true"/>
                    <to uri="fedora:addDatastream?name=FGDC-Research&amp;type=text/xml&amp;group=X&amp;dsLabel=FGDC-Research%20Record&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing sub-project as the current object. -->
                    <log message="${id}: Sub-project already exists - ${body}."
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <setHeader headerName="SubProjectPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <setHeader headerName="SubProjectId">
                <simple>
                    ${header.DeploymentCorrelationId}
                </simple>
            </setHeader>
            <setHeader headerName="SubProjectName">
                <simple>
                    ${header.CamelFedoraLabel}
                </simple>
            </setHeader>

            <log message="${id}: Finished processing subproject."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <route id="WCSProcessProject">
            <from uri="direct:processProject"/>
            <log message="${id}: Started processing project ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <!-- Look for the project. -->
            <setBody>
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //ProjectName
                </xpath>
            </setBody>
            <setHeader headerName="CamelFedoraLabel">
                <simple>
                    ${body}
                </simple>
            </setHeader>
            <!-- stash project identifier to be used for the in-flight parent process checks. -->
            <setHeader headerName="DeploymentCorrelationId">
                <xpath resultType="java.lang.String" headerName="ManifestXML">
                    //ProjectId
                </xpath>
            </setHeader>
            <log message="${id}: Label - ${body}  Parent PID - ${header.CamelFedoraPid}."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="direct:findObject"/>
            <choice>
                <when>
                    <simple>
                        ${body} == ''
                    </simple>
                    <log message="${id}: Project does not exist."
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <!-- Create WCS CT project and add it as a sub-concept of the Camera Trap root object. -->
                    <to uri="fedora:create?pid=null&amp;owner={{si.ct.owner}}&amp;namespace={{si.ct.namespace}}"/>
                    <!-- Add a minimal RELS-EXT to the project. -->
                    <to uri="velocity:file:{{karaf.home}}/Input/templates/CTProjectTemplate.vsl"/>
                    <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
                    <!-- Add Relation from parent WCS CT root object to the child WCS CT project. -->
                    <to uri="fedora:hasConcept?parentPid={{si.ct.root}}&amp;childPid=${header.CamelFedoraPid}"/>
                    <!-- Add an EAC-CPF datastream for concept metadata. -->
                    <setBody>
                        <simple>
                            ${header.ManifestXML}
                        </simple>
                    </setBody>
                    <to uri="xslt:file:{{karaf.home}}/Input/xslt/ManifestProject.xsl?saxon=true"/>
                    <to uri="fedora:addDatastream?name=EAC-CPF&amp;type=text/xml&amp;group=X&amp;dsLabel=EAC-CPF&amp;versionable=true"/>
                </when>
                <otherwise>
                    <!-- Return the existing project as the current object. -->
                    <log message="${id}: Project already exists - ${body}."
                         loggingLevel="DEBUG"
                         logName="{{si.ct.id}}"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${body}
                        </simple>
                    </setHeader>
                </otherwise>
            </choice>

            <setHeader headerName="ProjectPID">
                <simple>
                    ${header.CamelFedoraPid}
                </simple>
            </setHeader>
            <setHeader headerName="ProjectId">
                <simple>
                    ${header.DeploymentCorrelationId}
                </simple>
            </setHeader>
            <setHeader headerName="ProjectName">
                <simple>
                    ${header.CamelFedoraLabel}
                </simple>
            </setHeader>

            <log message="${id}: Finished processing project."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <!-- Validate Ingest Datastream Metadata Fields -->
        <route id="WCSValidateDatastreamFields">
            <from uri="direct:validateDatastreamFields"/>
            <log message="${id}: ValidateDatastreamFields: Starting Datastream Fields Validation ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            <to uri="direct:validate_EAC-CPF_Datastream"/>

            <to uri="direct:validate_FGDC_Datastream"/>

            <to uri="direct:validate_MODS_Datastream"/>

            <!-- Start Researcher CSV Validation -->
            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.ResearcherObservationPID}
                </simple>
            </setHeader>
            <to uri="direct:ValidateCSVFields"/>
            <!--
                If Volunteer or Image Observations exist Researcher Validation Errors will be sent to the aggregator
                before continuing to the next validation.
                If Volunteer or Image Observations DO NOT exist the ValidationComplete header is set and the
                Researcher Observation Errors are sent to the aggregator for final validation error message aggregation
            -->
            <!-- Start Volunteer CSV Validation -->
            <choice>
                <when>
                    <header>VolunteerObservationPID</header>
                    <!-- Send the Validation Error Message to the aggregator if any -->
                    <to uri="direct:validationErrorMessageAggregationStrategy"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${header.VolunteerObservationPID}
                        </simple>
                    </setHeader>
                    <to uri="direct:ValidateCSVFields"/>
                </when>
            </choice>

            <!-- Start Image CSV Validation -->
            <choice>
                <when>
                    <header>ImageObservationPID</header>
                    <!-- Send the Validation Error Message to the aggregator if any -->
                    <to uri="direct:validationErrorMessageAggregationStrategy"/>
                    <setHeader headerName="CamelFedoraPid">
                        <simple>
                            ${header.ImageObservationPID}
                        </simple>
                    </setHeader>
                    <to uri="direct:ValidateCSVFields"/>
                </when>
            </choice>

            <!-- Notify the aggregator to complete aggregation -->
            <setHeader headerName="ValidationComplete">
                <simple>
                    true
                </simple>
            </setHeader>

            <to uri="direct:validationErrorMessageAggregationStrategy"/>

            <log message="${id}: ValidateDatastreamFields: Datastream Fields Validation Complete..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>

        <!-- EAC-CPF Datastream Validation Route -->
        <route id="WCSValidate_EAC-CPF_Datastream">
            <from uri="direct:validate_EAC-CPF_Datastream"/>

            <log message="${id}: ValidateDatastreamFields: Starting EAC-CPF Datastream Validation ..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <!-- Start EAC-CPF Validation -->
            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.ProjectPID}
                </simple>
            </setHeader>

            <!-- Get the EAC-CPF datastream from the project parent -->
            <to uri="fedora://getDatastreamDissemination?dsId=EAC-CPF&amp;exchangePattern=InOut"/>

            <convertBodyTo type="java.lang.String"/>

            <!-- Store the current datastream to be used in the validation bean -->
            <setHeader headerName="datastreamValidationXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            <!-- the piped separated list of xpath's and field names to be validated -->
            <setBody>
                <simple trim="true">
                    <!--EAC-CPF ProjectName|//eac:nameEntry[1]/eac:part/text()|concat(//ProjectName/text(), ' &#40;', //ProjectId/text(), '&#41;')-->
                    EAC-CPF ProjectName|//eac:nameEntry[1]/eac:part/text()|//ProjectName/text()
                </simple>
            </setBody>
            <to uri="direct:ValidateDatastreamFieldList"/>
            <to uri="direct:validationErrorMessageAggregationStrategy"/>
        </route>

        <!-- FGDC Datastream Validation Route -->
        <route id="WCSValidate_FGDC_Datastream">
            <from uri="direct:validate_FGDC_Datastream"/>

            <log message="${id}: ValidateDatastreamFields: Starting FGDC Datastream Validation ..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <!-- Start FGDC Validation -->
            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.SitePID}
                </simple>
            </setHeader>

            <!-- Get the FGDC datastream from the project parent -->
            <to uri="fedora://getDatastreamDissemination?dsId=FGDC&amp;exchangePattern=InOut" id="getFGDCDatastream"/>

            <convertBodyTo type="java.lang.String"/>

            <!-- Store the current datastream to be used in the validation bean -->
            <setHeader headerName="datastreamValidationXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            <!-- the piped separated list of xpath's and field names to be validated -->
            <setBody>
                <simple trim="true">
                    FGDC CameraDeploymentID|//citeinfo/othercit/text()|//CameraDeploymentID/text()
                </simple>
            </setBody>
            <to uri="direct:ValidateDatastreamFieldList"/>
            <to uri="direct:validationErrorMessageAggregationStrategy" id="aggregateFGDC"/>
        </route>

        <!-- MODS Datastream Validation Route -->
        <route id="WCSValidate_MODS_Datastream">
            <from uri="direct:validate_MODS_Datastream"/>

            <log message="${id}: ValidateDatastreamFields: Starting MODS Datastream Validation ..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <!-- Start MODS Validation -->
            <!-- get the PID that we stored using the filter in the addMODSDatastream route -->
            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.ImageResourcePID}
                </simple>
            </setHeader>

            <!-- Get the MODS datastream -->
            <to uri="fedora://getDatastreamDissemination?dsId=MODS&amp;exchangePattern=InOut" id="getMODSDatastream"/>

            <convertBodyTo type="java.lang.String"/>

            <!-- Store the current datastream  to be used in the validation bean -->
            <setHeader headerName="datastreamValidationXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            <!-- the piped separated list of xpath's and field names to be validated -->
            <setBody>
                <simple trim="true">
                    MODS ImageSequenceId|//mods:relatedItem/mods:identifier/text()|//ImageSequence[1]/ImageSequenceId[1]/text()
                </simple>
            </setBody>
            <to uri="direct:ValidateDatastreamFieldList"/>
            <to uri="direct:validationErrorMessageAggregationStrategy" id="aggregateMODS"/>
        </route>

        <!-- Validate the provided datastream and field list -->
        <route id="WCSValidateDatastreamFieldList">
            <from uri="direct:ValidateDatastreamFieldList"/>
            <log message="${id}: ValidateDatastreamFieldList: Starting Validation of Datastream Metadata Fields List..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <split streaming="true" strategyRef="cameraTrapValidationMessageAggregationStrategy">
                <tokenize token="\r\n|\n" xml="false" trim="true" />
                <!-- Use a bean for validation because xpathbuilder is need -->
                <to uri="bean:postIngestionValidator?method=validateField"/>
            </split>

            <log message="${id}: ValidateDatastreamFieldList: Validation of Datastream Fields List Complete..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
        </route>

        <!-- Validate CSV Fields -->
        <route id="WCSValidateCSVFields">
            <from uri="direct:ValidateCSVFields"/>

            <log message="${id}: ValidateCSVFields: Starting Observation CSV Validation..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <to uri="fedora://getDatastreamDissemination?dsId=CSV&amp;exchangePattern=InOut"/>
            <convertBodyTo type="java.lang.String"/>

            <unmarshal>
                <csv delimiter=","/>
            </unmarshal>

            <!-- Get Researcher, Volunteer, or Image from the CSV -->
            <setHeader headerName="Observer">
                <simple resultType="java.lang.String">
                    ${body[0][0]}Identifications
                </simple>
            </setHeader>

            <!-- Count the number of observation records in the csv -->
            <setHeader headerName="CSVObservationCount">
                <simple resultType="java.lang.Integer">
                    ${body.size()}
                </simple>
            </setHeader>

            <!-- Validate each CSV observation matches the Manifest -->
            <!-- Store the first ImageSequenceId to validate the CSV was created -->
            <setHeader headerName="CSVImageSeqID">
                <simple resultType="java.lang.String">
                    ${body[0][2]}
                </simple>
            </setHeader>

            <log message="${id}: ValidateCSVFields: ${header.Observer} | CSVObservationCount = ${header.CSVObservationCount} | CSVImageSeqID = ${header.CSVImageSeqID}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <setHeader headerName="validationResult">
                <xpath headerName="ManifestXML" resultType="java.lang.String">
                    boolean((//ImageSequenceId/text() = $in:CSVImageSeqID) and (count(//*[name() = $in:Observer]/Identification) = $in:CSVObservationCount))
                </xpath>
            </setHeader>

            <log message="${id}: ValidateCSVFields: ${header.Observer} validationResult: ${header.validationResult} "
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <choice>
                <when>
                    <!-- Check that the ImageSequenceID exists and observation counts matches the manifest -->
                    <simple>
                        ${header.validationResult} == false
                    </simple>

                    <!-- The CSV was not generated create validation error message -->
                    <setBody>
                        <simple>
                            ${header.Observer} CSV: Validation Failed!
                        </simple>
                    </setBody>

                    <log message="${id}: ValidateCSVFields: ${body}"
                         loggingLevel="WARN"
                         logName="{{si.ct.id}}"/>

                    <to uri="bean:cameraTrapValidationMessage?method=createValidationMessage(${header.CamelFileParent}, ${body}, false)"/>
                </when>
                <otherwise>
                    <setBody>
                        <simple>""</simple>
                    </setBody>
                </otherwise>
            </choice>

            <log message="${id}: ValidateCSVFields: ${header.Observer} CSV Validation Complete..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
        </route>

        <!-- Validation Error Message Aggregation Strategy -->
        <route id="WCSValidationErrorMessageAggregationStrategy">
            <from uri="direct:validationErrorMessageAggregationStrategy"/>
            <aggregate strategyRef="cameraTrapValidationMessageAggregationStrategy" eagerCheckCompletion="true">
                <correlationExpression>
                    <simple>header.ValidationErrors</simple>
                </correlationExpression>
                <completionPredicate>
                    <simple>${header.ValidationComplete} == 'true'</simple>
                </completionPredicate>

                <choice>
                    <when>
                        <simple>${body.size} == 0</simple>

                        <log message="${id}: Successful Ingest: DeploymentPackage=${header.CamelFileParent}, DeploymentId=${header.SiteId}, DeploymentName=${header.SiteName}, ProjectID=${header.ProjectId}, ProjectName=${header.ProjectName}, SubprojectID=${header.SubprojectId}, SubprojectName=${header.SubprojectName}"
                             loggingLevel="INFO"
                             logName="{{si.ct.id}}"/>

                    </when>
                    <otherwise>
                        <log message="${id}: Ingest Validation Errors for: DeploymentPackage=${header.CamelFileParent}, DeploymentId=${header.SiteId}, DeploymentName=${header.SiteName}, ProjectID=${header.ProjectId}, ProjectName=${header.ProjectName}, SubprojectID=${header.SubprojectId}, SubprojectName=${header.SubprojectName}\nValidation Errors:\n${body}"
                     loggingLevel="ERROR"
                     logName="{{si.ct.id}}"/>
                    </otherwise>
                </choice>

            </aggregate>
        </route>

        <route id="WCSInFlightConceptStatusPolling">
            <from uri="timer://checkConceptFromRI?fixedRate=true&amp;period={{si.ct.checkConceptFromRI.period}}"/>
            <log message="${id}: InFlightConceptStatusPolling: Starting the In-Flight Concept process status check..."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>

            <!-- retrieve the collection of correlation identifiers from the storage-->
            <to uri="bean:cameraTrapStaticStore?method=getInFlightCorrelationIds()"/>
            <split>
                <simple>${body.keySet}</simple>
                <!-- retrieve the correlation information from the storage; such as the deployment id, correlation label etc-->
                <to uri="bean:cameraTrapStaticStore?method=getCorrelationInformationById(${body})"/>

                <!-- stash correlation identifier so we can remove it from the storage if the concept is found in the RI -->
                <setHeader headerName="TempCorrelationId">
                    <simple>
                        ${body.correlationId}
                    </simple>
                </setHeader>

                <!-- set required headers and body for the find object operation to function -->
                <setHeader headerName="CamelFedoraPid">
                    <simple>
                        ${body.parentObjectPid}
                    </simple>
                </setHeader>
                <setHeader headerName="CamelFileParent">
                    <simple>
                        ${body.deploymentId}
                    </simple>
                </setHeader>
                <setBody>
                    <simple>
                        ${body.correlationLabel}
                    </simple>
                </setBody>

                <to uri="direct:findObject" />

                <!-- if concept is found in RI, we can safely remove from the storage to release the wait lock -->
                <choice>
                    <when>
                        <simple>
                            ${body} != ''
                        </simple>
                        <log message="${id}: InFlightConceptStatusPolling: Concept object: ${header.TempCorrelationId} found from RI.. removing from the data structure..."
                             loggingLevel="DEBUG"
                             logName="{{si.ct.id}}"/>
                        <to uri="bean:cameraTrapStaticStore?method=removeCorrelationId(${header.TempCorrelationId})"/>
                    </when>
                </choice>

            </split>

            <log message="${id}: InFlightConceptStatusPolling: Finished In-Flight Concept Process status check."
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
        </route>
    </camelContext>
</blueprint>