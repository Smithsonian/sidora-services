<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015-2016 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:util="http://www.springframework.org/schema/util"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
             http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
             http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <!-- The properties should not be changed from karaf or external cfg if there are deployments currently being ingested
        as it would cause the camel context to reload and error out any in-flight ingestion processes. -->
    <cm:property-placeholder id="sidora.karaf.batch.properties" persistent-id="edu.si.sidora.batch" update-strategy="none">
        <cm:default-properties>
            <cm:property name="edu.si.batch" value="edu.si.batch"/>
            <cm:property name="si.fedora.batch.user" value="camelBatchProcess"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!-- Defined the server endpoint to create the cxf-rs consumer -->
    <camel-cxf:rsServer id="rsServer" address="${sidora.rest.service.address}"
                  serviceClass="edu.si.services.sidora.rest.batch.BatchResourcesService"
                  loggingFeatureEnabled="true">
        <camel-cxf:providers>
            <ref component-id="jaxbProvider"/>
            <ref component-id="jsonProvider"/>
        </camel-cxf:providers>
        <camel-cxf:outInterceptors>
            <bean class="org.apache.cxf.jaxrs.provider.jsonp.JsonpPostStreamInterceptor">
                <!-- default is ');' -->
                <property name="paddingEnd" value=")"/>
            </bean>
        </camel-cxf:outInterceptors>
    </camel-cxf:rsServer>

    <!-- Beans for the cxf-rs server -->
    <bean id="batchService" class="edu.si.services.sidora.rest.batch.BatchResourcesService"/>
    <bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
        <property name="marshallerProperties">
            <map>
                <entry>
                    <key>
                        <value>jaxb.formatted.output</value>
                    </key>
                    <value type="java.lang.Boolean">true</value>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider"/>

    <bean id="requestProcessor" class="edu.si.services.sidora.rest.batch.client.RequestProcessor"/>

    <bean id="dropHeadersStrategy" class="org.apache.camel.impl.DefaultHeaderFilterStrategy">
        <property name="outFilter">
            <set>
                <value>ds_metadataXML</value>
                <value>ds_sidoraXML</value>
                <value>ds_dcXML</value>
                <value>associationXML</value>
            </set>
        </property>
    </bean>

    <!-- This is the JDBC data source which uses a MySQL database -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://${mysql.host}:${mysql.port}/${mysql.database}?zeroDateTimeBehavior=convertToNull" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
    </bean>

    <!-- configure the Camel SQL component to use the JDBC data source -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="batchRequestControllerBean" class="edu.si.services.sidora.rest.batch.beans.BatchRequestControllerBean" />

    <bean id="responseControllerBean" class="edu.si.services.sidora.rest.batch.beans.ResponseControllerBean"/>

    <bean id="pidAggregator" class="edu.si.services.fedorarepo.aggregators.PidAggregationStrategy"/>

    <!-- Batch Process route context -->
    <!--The "unused" namespace definitions are needed to deal with the way Camel handles namespaces in XPath.-->
    <camelContext id="SidoraRestService"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xmlns:objDatastreams="http://www.fedora.info/definitions/1/0/access/"
                  xmlns:findObjects="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:ri="http://www.w3.org/2005/sparql-results#"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fedora="info:fedora/fedora-system:def/relations-external#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:eac="urn:isbn:1-931666-33-4"
                  xmlns:mods="http://www.loc.gov/mods/v3"
                  xmlns:fgdc="http://localhost/"
                  xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/"
                  xmlns:dc="http://purl.org/dc/elements/1.1/"
                  xmlns:srw_dc="info:srw/schema/1/dc-schema"
                  xsi:schemaLocation="http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.3.xsd"
                  trace="false" useMDCLogging="true" useBreadcrumb="false">

        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:sidora.karaf.batch.properties,
                             file:${karaf.home}/etc/edu.si.sidora.batch.cfg,
                             file:${karaf.home}/sql/batch.process.sql.properties"/>

        <onException>
            <exception>org.apache.camel.component.cxf.CxfOperationException</exception>
            <onWhen>
                <simple>${exception.statusCode} not in &#39;200,201&#39;</simple>
            </onWhen>
            <handled><constant>true</constant></handled>
        </onException>

        <route id="SidoraRESTService">
            <from uri="cxfrs://bean://rsServer?bindingStyle=SimpleConsumer"/>
            <log message="{id}: Starting SidoraRESTService Request for: ${header.operationName} ... "
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>direct:${header.operationName}</simple>
            </recipientList>

        </route>

        <route id="BatchProcessAddResourceObjects">
            <from uri="direct:addResourceObjects"/>
            <log message="${id}: Starting Batch Request - Add Resource Objects..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- removing headers making it hard to debug-->
            <removeHeaders pattern="User-Agent|CamelHttpCharacterEncoding|CamelHttpPath|CamelHttpQuery|CamelHttpUri|connection|Content-Length|Content-Type|boundary|CamelCxfRsResponseGenericType|org.apache.cxf.request.uri|CamelCxfMessage|CamelHttpResponseCode|Host|accept-encoding|CamelAcceptContentType|CamelCxfRsOperationResourceInfoStack|CamelCxfRsResponseClass|CamelHttpMethod"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    GET
                </simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
            <setHeader headerName="Accept">
                <constant>application/xml</constant>
            </setHeader>

            <toD uri="cxfrs://${header.resourceFileList}" pattern="InOut" id="httpGetResourceList"/>

            <setHeader headerName="resourceXML">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <setHeader headerName="resourceCount">
                <xpath headerName="resourceXML" resultType="java.lang.Integer">
                    count(//file)
                </xpath>
            </setHeader>

            <to uri="bean:batchRequestControllerBean?method=createCorrelationId"/>
            <to uri="sql:{{sql.insertNewBatchRequest}}"/>

            <log message="${id}: Batch Request CorrelationId: ${header.correlationId}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- add each resource to the camelBatchResources mysql table -->
            <split>
                <xpath headerName="resourceXML">
                    //file/text()
                </xpath>

                <setHeader headerName="resourceFile">
                    <simple resultType="java.lang.String">
                        ${body}
                    </simple>
                </setHeader>

                <to uri="sql:{{sql.insertResources}}"/>

                <log message="========================[ ResourceFile: ${header.resourceFile} ]============================="
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>
            </split>

            <!-- send the xml response body -->
            <to uri="bean:responseControllerBean?method=batchRequestResponse"/>

            <log message="${id}: Finished Batch Request - Add Resource Objects..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessRequestStatus">
            <from uri="direct:requestStatus"/>
            <to uri="bean:batchRequestControllerBean?method=checkStatus"/>
            <to uri="sql:{{sql.checkRequestStatus}}?outputHeader=batchRequest&amp;outputType=SelectList"/>
            <to uri="sql:{{sql.checkResourceStatus}}"/>
            <to uri="bean:responseControllerBean?method=batchStatus"/>
        </route>

        <!-- route that process the Batch Requests by picking up new rows from the database
        and when done processing then update the row to mark it as complete -->
        <route id="BatchProcessResources">
            <from uri="sql:{{sql.selectBatchRequest}}?onConsume={{sql.markRequestConsumed}}"/>
            <log message="${id}: Starting Batch Resources Processing..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Setup the authorization header for http calls to fedora REST endpoint -->
            <to uri="bean:requestProcessor?method=setAuthorization"/>

            <!-- setting up headers and body from sql polling consumer -->
            <to uri="bean:batchRequestControllerBean?method=processBatchRequest"/>

            <!-- process associations information -->
            <to uri="direct:processAssociationInfo"/>

            <to uri="sql:{{sql.selectResources}}"/>

            <log message="${id}: Batch Request CorrelationId: ${header.correlationId}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.parentId}
                </simple>
            </setHeader>

            <log message="${id}: Batch Request Parent PID=${header.CamelFedoraPid},  Resource Count=${header.resourceCount}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- There may be several kinds of resources with zero or more instances. -->
            <split strategyRef="pidAggregator"> <!-- pidAggregator stores pids to ${header.PIDAggregation} -->
                <simple>${body}</simple>

                <log message="{id}: Batch Process: Split Body: ${body}"
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>

                <log message="${id}: Batch Process CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>

                <setHeader headerName="resourceFile">
                    <simple>
                        ${body[resourceFile]}
                    </simple>
                </setHeader>

                <to uri="sql:{{sql.markResourceConsumed}}"/>

                <to uri="direct:addResource"/>

                <setHeader headerName="processCount">
                    <simple>
                        ${property.CamelSplitIndex}++
                    </simple>
                </setHeader>

                <to uri="sql:{{sql.updateBatchProcessCount}}"/>

                <setHeader headerName="request_complete">
                    <simple>
                        ${property.CamelSplitComplete}
                    </simple>
                </setHeader>

                <to uri="sql:{{sql.markRequestComplete}}"/>


                <log message="${id}: Created Resource - ${body}."
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>
            </split>

            <log message="${id}: Created Resource Objects - ${header.PIDAggregation}."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <log message="${id}: Finished Batch Resource Processing."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAssociationInformation">
            <from uri="direct:processAssociationInfo"/>
            <log message="${id}: Start processing Association Info."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    GET
                </simple>
            </setHeader>
            <setBody>
                <constant/>
            </setBody>

            <toD uri="cxfrs://${header.association}?headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="httpGetAssociation"/>

            <setHeader headerName="associationXML">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <setHeader headerName="contentModel">
                <xpath resultType="java.lang.String" headerName="associationXML">
                    //content_model/text()
                </xpath>
            </setHeader>

            <setHeader headerName="dsID">
                <xpath resultType="java.lang.String" headerName="associationXML">
                    //dsid/text()
                </xpath>
            </setHeader>

            <setHeader headerName="mods_to_dc_XSL">
                <xpath resultType="java.lang.String" headerName="associationXML">
                    //transform/text()
                </xpath>
            </setHeader>

            <!-- header is an XSLT param -->
            <setHeader headerName="titlePath">
                <xpath resultType="java.lang.String" headerName="associationXML">
                    //association/title_field/*[last()]
                </xpath>
            </setHeader>

            <log message="${id}: Finished processing Association Info."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddResource">
            <from uri="direct:addResource"/>
            <log message="${id}: Started Batch Process: Add Resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <to uri="direct:setupMetadata"/>

            <to uri="direct:createNewResource"/>

            <choice>
                <when>
                    <simple>${header.dsID} == 'MODS'</simple>
                    <to uri="direct:updateDCDatastream"/>
                </when>
            </choice>

            <to uri="direct:addRelsExtDatastream"/>
            <to uri="direct:addMetadataDatastream"/>
            <to uri="direct:addSidoraDatastream"/>
            <to uri="direct:addOBJDatastream"/>

            <!-- add thumbnail for audio resources -->
            <filter>
                <simple>
                    ${header.dsMIME} == 'audio/mpeg' ||
                    ${header.dsMIME} == 'audio/vnd.wave' ||
                    ${header.dsMIME} == 'audio/vnd.wav' ||
                    ${header.dsMIME} == 'audio/x-wav' ||
                    ${header.dsMIME} == 'audio/vorbis' ||
                    ${header.dsMIME} == 'audio/x-ms-wma' ||
                    ${header.dsMIME} == 'audio/x-aac' ||
                    ${header.dsMIME} == 'audio/x-aiff'
                </simple>
                <to uri="direct:addTNDatastream"/>
            </filter>

            <!--<to uri="direct:addFITSDatastream"/>-->
            <to uri="direct:addRelationships"/>

            <setHeader headerName="resource_complete">
                <simple resultType="java.lang.Boolean">true</simple>
            </setHeader>

            <to uri="sql:{{sql.markResourceComplete}}"/>

            <log message="${id}: Finished Batch Process: Add Resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessSetupMetadata">
            <from uri="direct:setupMetadata"/>
            <log message="${id}: Started setting up Metadata ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- get metadata file and update title -->
            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    GET
                </simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
            <setHeader headerName="Accept">
                <constant>application/xml</constant>
            </setHeader>
            <setBody>
                <simple></simple>
            </setBody>
            <!-- http call to get the metadata file -->
            <toD uri="cxfrs://${header.ds_metadata}?headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="httpGetDataStreamFile"/>

            <convertBodyTo type="java.lang.String"/>

            <!-- header is an XSLT param -->
            <setHeader headerName="titleLabel">
                <xpath resultType="java.lang.String">
                    concat(//*[local-name()=function:simple(&#39;${header.titlePath}&#39;)]/text(), function:simple(&#39;(${property.CamelSplitIndex})&#39;))
                </xpath>
            </setHeader>

            <log message="${id}: Batch Process Title/Label: ${header.titleLabel} For Resource: ${header.resourceFile}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <to uri="xslt:file:Input/xslt/BatchProcess_ManifestResource.xsl?saxon=true"/>

            <!-- store the metadata with updated title -->
            <setHeader headerName="ds_metadataXML">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <log message="${id}: Batch Process Title/Label: ${header.titleLabel} For Resource: ${header.resourceFile}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <log message="${id}: Finished setting up Metadata ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessCreateNewResource">
            <from uri="direct:createNewResource"/>
            <log message="${id}: Started creating new resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Create a new resource object -->
            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
            <setBody>
                <constant/>
            </setBody>

            <!-- Http call to create a new resource object -->
            <toD uri="cxfrs://{{si.fedora.host}}/objects/new?ownerId=${header.resourceOwner}&amp;namespace=si&amp;label=${header.titleLabel}&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="newFedoraObject"/>

            <setHeader headerName="CamelFedoraPid">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, resource_created)"/>
            <to uri="sql:{{sql.updateResourceCreated}}"/>

            <log message="${id}: Finished creating new resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessUpdateDCDatastream">
            <from uri="direct:updateDCDatastream"/>
            <log message="${id}: Started processing DC ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setBody>
                <simple>
                    ${header.ds_metadataXML}
                </simple>
            </setBody>

            <!--<log message="=============[ MODS original ]==============\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>-->

            <toD uri="xslt:{{extract.mods.from.collection.xsl}}"/>

            <!--<log message="=============[ MODS after extract_mods_from_collection.xsl ]==============\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>-->

            <toD uri="xslt:${header.mods_to_dc_XSL}?saxon=true"/>

            <!--<log message="=============[ MODS after extract_mods_from_collection.xsl AND mods_to_dc.xsl ]==============\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>-->

            <log message="${id}: DC XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <!-- Update dc datastream -->
            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/DC?headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="updateDCDatastream"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, ds_dc_created)"/>
            <to uri="sql:{{sql.updateDsDcCreated}}"/>

            <log message="${id}: Finished processing DC."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddRelsExtDatastream">
            <from uri="direct:addRelsExtDatastream"/>
            <log message="${id}: Started processing RELS-EXT ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <to uri="velocity:file:Input/templates/BatchResourceTemplate.vsl"/>

            <!-- Add a datastream for RELS-EXT. -->
            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/RELS-EXT?controlGroup=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;mimeType=application/rdf+xml&amp;versionable=false&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addRels-ExtDatastream"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, ds_relsExt_created)"/>
            <to uri="sql:{{sql.updateDsRelsExtCreated}}"/>

            <log message="${id}: Finished processing RELS-EXT."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddMetadataDatastream">
            <from uri="direct:addMetadataDatastream"/>
            <log message="${id}: Started processing ${header.dsID} ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Add a datastream for metadata. -->
            <setBody>
                <simple>
                    ${header.ds_metadataXML}
                </simple>
            </setBody>

            <log message="${id}: ${header.dsID} XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/${header.dsID}?mimeType=text/xml&amp;controlGroup=X&amp;dsLabel=${header.dsID}%20Record&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addMetadataDatastream"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, ds_metadata_created)"/>
            <to uri="sql:{{sql.updateDsMetadataCreated}}"/>

            <log message="${id}: Finished processing ${header.dsID}."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddSidoraDatastream">
            <from uri="direct:addSidoraDatastream"/>
            <log message="${id}: Started processing SIDORA Datastream ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setBody>
                <constant/>
            </setBody>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/SIDORA?dsLocation=${header.ds_sidora}&amp;mimeType=text/xml&amp;controlGroup=X&amp;dsLabel=SIDORA&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addSidoraDatastream"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, ds_sidora_created)"/>
            <to uri="sql:{{sql.updateDsSidoraCreated}}"/>

            <log message="${id}: Finished processing SIDORA Datastream ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddOBJDatastream">
            <from uri="direct:addOBJDatastream"/>
            <log message="${id}: Started processing OBJ ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Need the Mime Type for the OBJ datastream -->
            <to uri="bean:batchRequestControllerBean?method=getMIMEType"/>

            <log message="${id}: Batch Process: Found: ${header.dsMIME}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <setBody>
                <constant/>
            </setBody>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/OBJ?dsLocation=${header.resourceFile}&amp;mimeType=${header.dsMIME}&amp;controlGroup=M&amp;dsLabel=${header.titleLabel}&amp;versionable=false&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addObjDatastream"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, ds_obj_created)"/>
            <to uri="sql:{{sql.updateDsObjCreated}}"/>

            <log message="${id}: Finished processing OBJ."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

        </route>

        <route id="BatchProcessAddTNDatastream">
            <from uri="direct:addTNDatastream"/>
            <log message="${id}: Batch Process: Audio Resource Found: ${header.dsMIME}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <setBody>
                <constant/>
            </setBody>

            <!-- Create a audio thumbnail TN. -->
            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/TN?dsLocation={{audio.thumbnail.png}}&amp;mimeType=image/jpg&amp;controlGroup=M&amp;dsLabel=TN&amp;versionable=false&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addTNDatastream"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, ds_tn_created)"/>
            <to uri="sql:{{sql.updateDsTnCreated}}"/>

            <log message="${id}: Finished processing TN."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddRelationships">
            <from uri="direct:addRelationships"/>
            <log message="${id}: Started processing Relationships for ${header.dsID}..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setBody>
                <constant/>
            </setBody>

            <filter>
                <simple>
                    ${header.dsID} == 'FGDC'
                </simple>

                <!-- add codebook relationship -->
                <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/relationships/new?predicate=info:fedora/fedora-system:def/relations-external%23hasCodebook&amp;subject=info:fedora/${header.CamelFedoraPid}&amp;object=info:fedora/${header.codebookPID}&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addCodebookRelationship"/>

                <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, codebook_relationship_created)"/>
                <to uri="sql:{{sql.updateCodebookRelationshipCreated}}"/>
            </filter>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setBody>
                <constant/>
            </setBody>

            <!-- add relationship to parent -->
            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.parentId}/relationships/new?predicate=info:fedora/fedora-system:def/relations-external%23hasResource&amp;subject=info:fedora/${header.parentId}&amp;object=info:fedora/${header.CamelFedoraPid}&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addRelationship"/>

            <to uri="bean:batchRequestControllerBean?method=updateCreatedStatus(*, parent_child_resource_relationship_created)"/>
            <to uri="sql:{{sql.updateParentChildResourceRelationshipCreated}}"/>

            <log message="${id}: Finished processing Relationships for ${header.dsID}."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

        </route>

        <!--<route id="BatchProcessAddFITSDatastream">
            <from uri="direct:addFITSDatastream"/>
            <log message="${id}: Started processing FITS ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileParentDir}/${header.resourceFile}
                </simple>
            </recipientList>

            <choice>
                &lt;!&ndash; If FITS processing succeeded? Store a FITS datastream on the FDO. &ndash;&gt;
                <when>
                    <simple>
                        ${header.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id}: FITS MIME: ${header.FITSmimeType}"
                             loggingLevel="DEBUG"
                             logName="{{edu.si.batch}}"/>
                    </setHeader>
                    <log message="${id}: Exec FITS. BODY: ${body}"
                         loggingLevel="DEBUG"
                         logName="{{edu.si.batch}}"/>
                    &lt;!&ndash;<to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>&ndash;&gt;
                </when>
                <otherwise>
                    <log message="${id}: FITS processing failed. PID: ${header.CamelFedoraPid}  Error Code: ${header.CamelExecExitValue}"
                         loggingLevel="ERROR"
                         logName="{{edu.si.batch}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished processing FITS."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>-->

    </camelContext>

</blueprint>