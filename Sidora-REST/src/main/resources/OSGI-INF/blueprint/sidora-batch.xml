<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015-2016 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
             http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd">

    <!-- OSGI blueprint property placeholder -->
    <!-- The properties should not be changed from karaf or external cfg if there are deployments currently being ingested
        as it would cause the camel context to reload and error out any in-flight ingestion processes. -->
    <cm:property-placeholder id="sidora.karaf.properties" persistent-id="edu.si.sidora.karaf" update-strategy="none">
        <cm:default-properties>
            <cm:property name="edu.si.batch" value="edu.si.batch"/>
            <cm:property name="service.address" value="/sidora/rest"/> <!-- http://localhost:8181/cxf/sidora/rest -->
        </cm:default-properties>
    </cm:property-placeholder>

    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!-- Defined the server endpoint to create the cxf-rs consumer -->
    <camel-cxf:rsServer id="rsServer" address="${service.address}"
                  serviceClass="edu.si.services.sidora.rest.batch.BatchResources"
                  loggingFeatureEnabled="true">
        <camel-cxf:providers>
            <ref component-id="jaxbProvider"/>
        </camel-cxf:providers>
    </camel-cxf:rsServer>

    <bean id="batchService" class="edu.si.services.sidora.rest.batch.BatchResources"/>
    <bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
        <property name="marshallerProperties">
            <map>
                <entry>
                    <key>
                        <value>jaxb.formatted.output</value>
                    </key>
                    <value type="java.lang.Boolean">true</value>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="processCorrelationID" class="edu.si.services.sidora.rest.batch.processor.ProcessCorrelationID"/>
    <bean id="processFileURL" class="edu.si.services.sidora.rest.batch.processor.ProcessFileURL"/>
    <!--<bean id="processMoveStagedFilesToProcessDir" class="edu.si.services.sidora.rest.batch.processor.ProcessMoveStagedFilesToProcessDir"/>-->

    <!--<bean id="responseControllerBean" class="edu.si.services.sidora.rest.batch.model.ResponseControllerBean"/>-->

    <bean id="statusResponseControllerBean" class="edu.si.services.sidora.rest.batch.model.StatusResponseControllerBean"/>

    <!--<bean id="fcrepoConfiguration" class="edu.si.services.camel.fcrepo.FcrepoConfiguration">
        <property name="fedoraHost" value="${si.fedora.host}"/>
        <property name="authUsername" value="${si.fedora.user}"/>
        <property name="authPassword" value="${si.fedora.password}"/>
    </bean>-->

    <!-- The camel route context -->
    <camelContext id="RestService"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xmlns:objDatastreams="http://www.fedora.info/definitions/1/0/access/"
                  xmlns:findObjects="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:ri="http://www.w3.org/2005/sparql-results#"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fedora="info:fedora/fedora-system:def/relations-external#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:eac="urn:isbn:1-931666-33-4"
                  xmlns:mods="http://www.loc.gov/mods/v3"
                  xsi:schemaLocation="http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.3.xsd"
                  trace="false" useMDCLogging="true" useBreadcrumb="false">
        <!--
          The "unused" namespace definitions above are needed to deal with the way Camel handles namespaces in XPath.
        -->
        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:sidora.karaf.properties,file:${karaf.home}/etc/system.properties"/>

        <route id="SidoraRESTService">
            <!-- Just need to ignoreDeleteMethodMessageBody -->
            <from uri="cxfrs://bean://rsServer?bindingStyle=SimpleConsumer"/>
            <log message="======================= Starting ======================="
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>direct:${header.operationName}</simple>
            </recipientList>

        </route>

        <route id="BatchProcessAddResourceObjectsRequest">
            <from uri="direct:batchProcessAddResourceObjectsRequest"/>
            <!--<log message="======================= [ Starting NewBatchResource ] ======================="
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
            &lt;!&ndash;<to uri="log:body2?level=INFO&amp;showAll=true&amp;multiline=true"/>&ndash;&gt;
            -->
            <!-- These Headers are giving me a headache!!! -->
            <removeHeaders pattern="User-Agent|CamelHttpCharacterEncoding|CamelHttpPath|CamelHttpQuery|CamelHttpUri|connection|Content-Length|Content-Type|boundary|CamelCxfRsResponseGenericType|org.apache.cxf.request.uri|CamelCxfMessage|CamelHttpResponseCode|Host|accept-encoding|CamelAcceptContentType|CamelCxfRsOperationResourceInfoStack|CamelCxfRsResponseClass|CamelHttpMethod"/>

            <!-- Give the Batch Process a correlationID -->
            <process ref="processCorrelationID"/>

            <setHeader headerName="stagingDir">
                <simple>
                    target/stagingDir/
                </simple>
            </setHeader>
            <setHeader headerName="processingDir">
                <simple>
                    target/BatchResourceData/
                </simple>
            </setHeader>

            <process ref="processFileURL"/>

            <setHeader headerName="CamelFileAbsolutePathStore">
                <simple>
                    ${header.CamelFileAbsolutePath}
                </simple>
            </setHeader>

            <to uri="log:body2?level=INFO&amp;showBody=true&amp;multiline=true"/>

            <to uri="direct:processResources"/>

            <!-- Set the REST response message -->
            <setBody>
                <simple>
                    &lt;Batch&gt;&lt;ParentPID&gt;${header.parentId}&lt;/ParentPID&gt;&lt;CorrelationID&gt;${header.correlationID}&lt;/CorrelationID&gt;&lt;/Batch&gt;
                </simple>
            </setBody>

        </route>

        <route id="BatchProcessAddResourceObjectsRequestStatus">
            <from uri="direct:batchProcessAddResourceObjectsRequestStatus"/>
            <bean ref="statusResponseControllerBean"/>
        </route>

        <route id="BatchProcessProcessResources">
            <from uri="direct:processResources"/>
            <log message="${id}: Starting resource processing ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <log message="Batch Process: CamelFileAbsolutePath: ${header.CamelFileAbsolutePath}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.parentId}
                </simple>
            </setHeader>

            <setBody>
                <simple resultType="java.lang.String">
                    metadata.xml
                </simple>
            </setBody>

            <to uri="reader:file"/>

            <setHeader headerName="metadataXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            <setBody>
                <simple>
                    ${header.resourceList}
                </simple>
            </setBody>

            <log message="${id}: Parent PID - ${header.parentId}  Resource Count - ${header.ResourceCount}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- There may be several kinds of resources with zero or more instances. -->
            <!--<split strategyRef="pidAggregator">-->
            <split>
                <tokenize token="," xml="false" trim="true"/>

                <log message="Batch Process: Split Body: ${body}"
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>

                <log message="${id}: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>

                <setHeader headerName="titleLabel">
                    <xpath resultType="java.lang.String" headerName="metadataXML">
                        concat(//mods:title/text(), function:simple(&#39;(${property.CamelSplitIndex})&#39;))
                    </xpath>
                </setHeader>

                <log message="${id}: Title/Label - ${header.titleLabel}"
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>


                <log message="${id}: Split Resource - ${body}"
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>

                <setBody>
                    <simple resultType="java.lang.String" trim="true">
                        ${body}
                    </simple>
                </setBody>

                <to uri="direct:addResource"/>

                <log message="${id}: Created Resource - ${body}."
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>
            </split>

            <log message="${id}: Finished resource processing."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>



        <route id="BatchProcessAddResource">
            <from uri="direct:addResource"/>
            <log message="${id}: Started Resource processing ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <log message="===================(0)=====================\nBody:\n${body}\nHeaders:\${headers}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <to uri="reader:file"/>

            <toD id="fedoraCreate" uri="fedora:create?pid=null&amp;owner=${header.parentId}&amp;namespace=si&amp;label=${header.titleLabel}"/>

            <log message="======================(1)==================\nHeaders:\${headers}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <toD id="fedoraAddDatastream" uri="fedora:addDatastream?name=OBJ&amp;type=image/jpeg&amp;group=M&amp;dsLabel=${header.titleLabel}&amp;versionable=false"/>

            <!--<multicast>-->
            <!--<to uri="direct:createThumbnail"/>-->
            <!-- <to uri="direct:createArchivalImage" /> -->
            <!-- We may also want a DISPLAY datastream. -->
            <!--</multicast>-->

            <to uri="velocity:file:Input/templates/BatchResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>
            <!--<to uri="direct:addFITSDataStream"/>
            <to uri="direct:addMODSDataStream"/>-->

            <!-- The current route only handles JPG. -->
            <choice>
                <!-- If the image is a JPEG? Do nothing. -->
                <when>
                    <simple>
                        ${header.dsMIME} == 'image/jpg' || ${header.dsMIME} == 'image/jpeg' || ${header.dsMIME} == 'image/jpe'
                    </simple>
                    <log message="${id}: Batch Process: Found JPEG."
                         loggingLevel="INFO"
                         logName="{{edu.si.batch}}"/>
                    <!-- Future: Make a JPEG2000 archival image and store it in the MASTER datastream. -->
                </when>
                <!-- Just warn for now. -->
                <otherwise>
                    <log message="${id}: Batch Process: Found non-JPEG Image."
                         loggingLevel="WARN"
                         logName="{{edu.si.batch}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished Image processing."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <!--<route id="UnifiedCameraTrapAddMODSDataStream">
            <from uri="direct:addMODSDataStream"/>
            <log message="${id}: Started processing MODS ..."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>

            &lt;!&ndash; Get the FITS XML and use XPATH to get the created date from it. &ndash;&gt;
            &lt;!&ndash;
            <setHeader headerName="FITSCreatedDate">
                <xpath logNamespaces="false" resultType="java.lang.String">
                    //fits:fileinfo/fits:created[@toolname="Exiftool"]
                </xpath>
            </setHeader>
            <log message="${id}: MODS FITS Created Date - ${header.FITSCreatedDate}"
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
            &ndash;&gt;

            &lt;!&ndash; TODO - The Image ID has .JPG appended and we may want to make this consistent. &ndash;&gt;
            &lt;!&ndash; Add a MODS datastream for concept metadata. &ndash;&gt;
            <setBody>
                <simple>
                    ${header.ManifestXML}
                </simple>
            </setBody>
            <to uri="xslt:file:Input/xslt/ManifestImage.xsl?saxon=true"/>
            <log message="${id}: MODS XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{si.ct.id}}"/>
            <to uri="fedora:addDatastream?name=MODS&amp;type=text/xml&amp;group=X&amp;dsLabel=MODS%20Record"/>

            <log message="${id}: Finished processing MODS."
                 loggingLevel="INFO"
                 logName="{{si.ct.id}}"/>
        </route>-->
    </camelContext>

</blueprint>