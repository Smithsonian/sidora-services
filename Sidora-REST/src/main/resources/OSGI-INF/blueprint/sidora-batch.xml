<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015-2016 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
             http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
             http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <!-- The properties should not be changed from karaf or external cfg if there are deployments currently being ingested
        as it would cause the camel context to reload and error out any in-flight ingestion processes. -->
    <cm:property-placeholder id="sidora.karaf.batch.properties" persistent-id="edu.si.sidora.batch" update-strategy="none"/>

    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!-- Defined the server endpoint to create the cxf-rs consumer -->
    <camel-cxf:rsServer id="rsServer" address="${sidora.rest.service.address}"
                  serviceClass="edu.si.services.sidora.rest.batch.BatchResources"
                  loggingFeatureEnabled="true">
        <!--<camel-cxf:providers>
            <ref component-id="jaxbProvider"/>
        </camel-cxf:providers>-->
    </camel-cxf:rsServer>

    <bean id="batchService" class="edu.si.services.sidora.rest.batch.BatchResources"/>
    <!--<bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
        <property name="marshallerProperties">
            <map>
                <entry>
                    <key>
                        <value>jaxb.formatted.output</value>
                    </key>
                    <value type="java.lang.Boolean">true</value>
                </entry>
            </map>
        </property>
    </bean>-->

    <bean id="processBatchCorrelationId" class="edu.si.services.sidora.rest.batch.processor.ProcessBatchCorrelationId"/>

    <bean id="processFileURL" class="edu.si.services.sidora.rest.batch.processor.ProcessFileURL"/>

    <bean id="statusResponseControllerBean" class="edu.si.services.sidora.rest.batch.model.StatusResponseControllerBean"/>

    <bean id="fedoraSettings" class="edu.si.services.fedorarepo.FedoraSettings">
        <argument index="0" value="${si.fedora.host}" type="java.lang.String"/>
        <argument index="1" value="${si.fedora.user}" type="java.lang.String"/>
        <argument index="2" value="${si.fedora.password}" type="java.lang.String"/>
    </bean>

    <bean id="fedora" class="edu.si.services.fedorarepo.FedoraComponent">
        <property name="settings" ref="fedoraSettings"/>
    </bean>

    <!-- The camel route context -->
    <camelContext id="RestService"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xmlns:objDatastreams="http://www.fedora.info/definitions/1/0/access/"
                  xmlns:findObjects="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:ri="http://www.w3.org/2005/sparql-results#"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fedora="info:fedora/fedora-system:def/relations-external#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:eac="urn:isbn:1-931666-33-4"
                  xmlns:mods="http://www.loc.gov/mods/v3"
                  xsi:schemaLocation="http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.3.xsd"
                  trace="false" useMDCLogging="true" useBreadcrumb="false">
        <!--
          The "unused" namespace definitions above are needed to deal with the way Camel handles namespaces in XPath.
        -->
        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:sidora.karaf.batch.properties,file:${karaf.home}/etc/edu.si.sidora.batch.cfg"/>

        <route id="SidoraRESTService">
            <from uri="cxfrs://bean://rsServer?bindingStyle=SimpleConsumer"/>
            <log message="======================= Starting SidoraRESTService Request ======================="
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>direct:${header.operationName}</simple>
            </recipientList>

        </route>

        <route id="BatchProcessAddResourceObjectsRequest">
            <from uri="direct:batchProcessAddResourceObjectsRequest"/>
            <log message="${id}: Starting Batch Request - Add Resource Objects..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
            <!-- These Headers are giving me a headache!!! -->
            <removeHeaders pattern="User-Agent|CamelHttpCharacterEncoding|CamelHttpPath|CamelHttpQuery|CamelHttpUri|connection|Content-Length|Content-Type|boundary|CamelCxfRsResponseGenericType|org.apache.cxf.request.uri|CamelCxfMessage|CamelHttpResponseCode|Host|accept-encoding|CamelAcceptContentType|CamelCxfRsOperationResourceInfoStack|CamelCxfRsResponseClass|CamelHttpMethod"/>

            <!-- Give the Batch Process a batchCorrelationId -->
            <process ref="processBatchCorrelationId"/>

            <log message="${id}: Batch Request CorrelationId: ${header.batchCorrelationID}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <process ref="processFileURL"/>
<!--

            &lt;!&ndash; Stash the metadata datastream to a header &ndash;&gt;
            <setBody>
                <simple resultType="java.lang.String">
                    metadata.xml
                </simple>
            </setBody>
            <to uri="reader:file"/>
            <setHeader headerName="metadataXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>

            &lt;!&ndash; Stash the sidora datastream to a header &ndash;&gt;
            <setBody>
                <simple resultType="java.lang.String">
                    sidora.xml
                </simple>
            </setBody>
            <to uri="reader:file"/>
            <setHeader headerName="sidoraXML">
                <simple>
                    ${body}
                </simple>
            </setHeader>
-->

            <to uri="direct:processResources"/>

            <!-- Set the REST response message -->
            <setBody>
                <simple>
                    &lt;Batch&gt;&lt;ParentPID&gt;${header.parentId}&lt;/ParentPID&gt;&lt;CorrelationID&gt;${header.batchCorrelationId}&lt;/CorrelationID&gt;&lt;/Batch&gt;
                </simple>
            </setBody>

            <log message="${id}: Finished Batch Request - Add Resource Objects..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddResourceObjectsRequestStatus">
            <from uri="direct:batchProcessAddResourceObjectsRequestStatus"/>
            <bean ref="statusResponseControllerBean"/>
        </route>

        <route id="BatchProcessResources">
            <from uri="direct:processResources"/>
            <log message="${id}: Starting Batch Resources Processing..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.parentId}
                </simple>
            </setHeader>

            <!-- TODO: Add validations for resources match whats in fedora -->
            <log message="${id}: Parent PID - ${header.parentId}  Resource Count - ${header.resourceCount}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setBody>
                <simple>
                    ${header.resourceList}
                </simple>
            </setBody>

            <!-- There may be several kinds of resources with zero or more instances. -->
            <!--<split strategyRef="pidAggregator">-->
            <split>
                <tokenize token="," xml="false" trim="true"/>

                <log message="Batch Process: Split Body: ${body}"
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>

                <log message="${id}: CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>

                <setHeader headerName="resourceFileName">
                    <simple>
                        ${body}
                    </simple>
                </setHeader>

                <!-- TODO: There may different paths/node name's used for the title in the MODS -->
                <!--
                &lt;!&ndash; header is an XSLT param &ndash;&gt;
                <setHeader headerName="titleNode">
                    <simple>
                        title
                    </simple>
                </setHeader>
                &lt;!&ndash; header is an XSLT param &ndash;&gt;
                <setHeader headerName="titleLabel">
                    <xpath resultType="java.lang.String" headerName="metadataXML">
                        concat(//in:titleNode/text(), function:simple(&#39;(${property.CamelSplitIndex})&#39;))
                    </xpath>
                </setHeader>
                -->

                <!-- TODO: for now assume path/node name for the title in the MODS-->
                <!-- header is an XSLT param -->
                <setHeader headerName="titleNode">
                    <simple>
                        title
                    </simple>
                </setHeader>
                <!-- header is an XSLT param -->
                <setHeader headerName="titleLabel">
                    <xpath resultType="java.lang.String" headerName="metadataXML">
                        concat(//mods:title/text(), function:simple(&#39;(${property.CamelSplitIndex})&#39;))
                    </xpath>
                </setHeader>

                <log message="${id}: Title/Label: ${header.titleLabel} For Resource: ${header.resourceFileName}"
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>

                <to uri="direct:addResource"/>

                <log message="${id}: Created Resource - ${body}."
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>
            </split>

            <log message="${id}: Finished Batch Resource Processing."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddResource">
            <from uri="direct:addResource"/>
            <log message="${id}: Started Batch Process: Add Resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <toD uri="fedora:create?pid=null&amp;owner=${header.resourceOwner}&amp;namespace=si&amp;label=${header.titleLabel}"/>
            <to uri="fedora:hasResource?parentPid=${header.parentId}&amp;childPid=${header.CamelFedoraPid}"/>

            <to uri="velocity:file:Input/templates/BatchResourceTemplate.vsl"/>
            <to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>

            <!-- Need the Mime Type for the OBJ datastream -->
            <to uri="direct:addFITSDatastream"/>


            <setBody>
                <simple>
                    ${header.resourceFileName}
                </simple>
            </setBody>

            <to uri="reader:file"/>

            <toD uri="fedora:addDatastream?name=OBJ&amp;type=${header.dsMIME}&amp;group=M&amp;dsLabel=${header.titleLabel}&amp;versionable=false"/>
            
            <to uri="direct:addMODSDatastream"/>
            <to uri="direct:addSidoraDatastream"/>

            <log message="${id}: Batch Process: Found: ${header.dsMIME}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <log message="${id}: Finished Batch Process: Add Resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BachProcessAddFITSDatastream">
            <from uri="direct:addFITSDatastream"/>
            <log message="${id}: Started processing FITS ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileParentDir}/${header.resourceFileName}
                </simple>
            </recipientList>

            <choice>
                <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
                <when>
                    <simple>
                        ${header.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id}: FITS MIME: ${header.FITSmimeType}"
                             loggingLevel="DEBUG"
                             logName="{{edu.si.batch}}"/>
                    </setHeader>
                    <log message="${id}: Exec FITS. BODY: ${body}"
                         loggingLevel="DEBUG"
                         logName="{{edu.si.batch}}"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>
                </when>
                <otherwise>
                    <log message="${id}: FITS processing failed. PID: ${header.CamelFedoraPid}  Error Code: ${header.CamelExecExitValue}"
                         loggingLevel="ERROR"
                         logName="{{edu.si.batch}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished processing FITS."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddMODSDatastream">
            <from uri="direct:addMODSDatastream"/>
            <log message="${id}: Started processing MODS ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Add a MODS datastream for metadata. -->
            <setBody>
                <simple>
                    ${header.metadataXML}
                </simple>
            </setBody>

            <to uri="xslt:file:Input/xslt/BatchProcess_ManifestResource.xsl?saxon=true"/>

            <log message="${id}: MODS XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <to uri="fedora:addDatastream?name=MODS&amp;type=text/xml&amp;group=X&amp;dsLabel=MODS%20Record"/>

            <log message="${id}: Finished processing MODS."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddSidoraDatastream">
            <from uri="direct:addSidoraDatastream"/>
            <log message="${id}: Started processing SIDORA Datastream ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setBody>
                <simple resultType="java.lang.String">
                    ${header.sidoraXML}
                </simple>
            </setBody>

            <!--<to uri="reader:file"/>-->

            <to uri="fedora:addDatastream?name=SIDORA&amp;type=text/xml&amp;group=X&amp;dsLabel=SIDORA"/>

            <log message="${id}: Finished processing SIDORA Datastream ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>
    </camelContext>

</blueprint>