<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015-2016 Smithsonian Institution.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License.You may obtain a copy of
  ~ the License at: http://www.apache.org/licenses/
  ~
  ~ This software and accompanying documentation is supplied without
  ~ warranty of any kind. The copyright holder and the Smithsonian Institution:
  ~ (1) expressly disclaim any warranties, express or implied, including but not
  ~ limited to any implied warranties of merchantability, fitness for a
  ~ particular purpose, title or non-infringement; (2) do not assume any legal
  ~ liability or responsibility for the accuracy, completeness, or usefulness of
  ~ the software; (3) do not represent that use of the software would not
  ~ infringe privately owned rights; (4) do not warrant that the software
  ~ is error-free or will be maintained, supported, updated or enhanced;
  ~ (5) will not be liable for any indirect, incidental, consequential special
  ~ or punitive damages of any kind or nature, including but not limited to lost
  ~ profits or loss of data, on any basis arising from contract, tort or
  ~ otherwise, even if any of the parties has been warned of the possibility of
  ~ such loss or damage.
  ~
  ~ This distribution includes several third-party libraries, each with their own
  ~ license terms. For a complete copy of all copyright and license terms, including
  ~ those of third-party libraries, please see the product release notes.
  -->

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:camel-cxf="http://camel.apache.org/schema/blueprint/cxf"
           xmlns:util="http://www.springframework.org/schema/util"
           xsi:schemaLocation="
             http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
             http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
             http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">

    <!-- OSGI blueprint property placeholder -->
    <!-- The properties should not be changed from karaf or external cfg if there are deployments currently being ingested
        as it would cause the camel context to reload and error out any in-flight ingestion processes. -->
    <cm:property-placeholder id="sidora.karaf.batch.properties" persistent-id="edu.si.sidora.batch" update-strategy="none">
        <cm:default-properties>
            <cm:property name="edu.si.batch" value="edu.si.batch"/>
            <cm:property name="si.fedora.batch.user" value="camelBatchProcess"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!--<jaxrs:server id="fedoraRestService"
                  address="http://localhost:8080/fedora/objects/"
                  staticSubresourceResolution="true">
        <jaxrs:serviceBeans>
            <ref bean="someService"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>-->

    <!-- Defined the server endpoint to create the cxf-rs consumer -->
    <camel-cxf:rsServer id="rsServer" address="${sidora.rest.service.address}"
                  serviceClass="edu.si.services.sidora.rest.batch.BatchResourcesService"
                  loggingFeatureEnabled="true">
        <!--<camel-cxf:providers>
            <ref component-id="jaxbProvider"/>
        </camel-cxf:providers>-->
    </camel-cxf:rsServer>

    <camel-cxf:rsClient id="rsClient" address="${si.fedora.host}/objects"
                        serviceClass="edu.si.services.sidora.rest.batch.client.FedoraService"
                        username="${si.fedora.user}"
                        password="${si.fedora.password}">
        <!--<camel-cxf:headers>
            <cxf:entry key="Charset" value="UTF-8"/>
        </camel-cxf:headers>-->
        <!--<camel-cxf:providers>
            <ref component-id="jaxbProvider"/>
        </camel-cxf:providers>-->
    </camel-cxf:rsClient>

    <!-- Beans for the cxf-rs server -->
    <bean id="batchService" class="edu.si.services.sidora.rest.batch.BatchResourcesService"/>

    <!-- Beans for the cxf-rs client -->
    <!--<bean id="batchClient" class="edu.si.services.sidora.rest.batch.client.FedoraService"/>-->

    <bean id="requestProcessor" class="edu.si.services.sidora.rest.batch.client.RequestProcessor"/>

    <bean id="dropHeadersStrategy" class="org.apache.camel.impl.DefaultHeaderFilterStrategy">
        <property name="outFilter">
            <set>
                <value>ds_MODSXML</value>
                <value>ds_SIDORAXML</value>
            </set>
        </property>
    </bean>

    <!--<bean id="jaxbProvider" class="org.apache.cxf.jaxrs.provider.JAXBElementProvider">
        <property name="marshallerProperties">
            <map>
                <entry>
                    <key>
                        <value>jaxb.formatted.output</value>
                    </key>
                    <value type="java.lang.Boolean">true</value>
                </entry>
            </map>
        </property>
    </bean>-->

    <!-- This is the JDBC data source which uses a MySQL database -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://${mysql.host}:${mysql.port}/${mysql.database}?zeroDateTimeBehavior=convertToNull" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
    </bean>

    <!-- configure the Camel SQL component to use the JDBC data source -->
    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="batchRequestControllerBean" class="edu.si.services.sidora.rest.batch.beans.BatchRequestControllerBean" />

    <bean id="responseControllerBean" class="edu.si.services.sidora.rest.batch.beans.ResponseControllerBean"/>

    <bean id="pidAggregator" class="edu.si.services.fedorarepo.aggregators.PidAggregationStrategy"/>

    <!-- settings for the fedora component -->
    <bean id="fedoraSettings" class="edu.si.services.fedorarepo.FedoraSettings" scope="singleton">
        <argument index="0" value="${si.fedora.host}" type="java.lang.String"/>
        <argument index="1" value="${si.fedora.batch.user}" type="java.lang.String"/>
        <argument index="2" value="${si.fedora.password}" type="java.lang.String"/>
    </bean>

    <!-- Fedora component needed to properly set the fedora username to camelBatchUser for the derivative camel route -->
    <bean id="fedora" class="edu.si.services.fedorarepo.FedoraComponent">
        <property name="settings" ref="fedoraSettings"/>
    </bean>

    <!-- Batch Process route context -->
    <!--The "unused" namespace definitions are needed to deal with the way Camel handles namespaces in XPath.-->
    <camelContext id="SidoraRestService"
                  xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                  xmlns:objDatastreams="http://www.fedora.info/definitions/1/0/access/"
                  xmlns:findObjects="http://www.fedora.info/definitions/1/0/types/"
                  xmlns:ri="http://www.w3.org/2005/sparql-results#"
                  xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
                  xmlns:fedora="info:fedora/fedora-system:def/relations-external#"
                  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                  xmlns:eac="urn:isbn:1-931666-33-4"
                  xmlns:mods="http://www.loc.gov/mods/v3"
                  xsi:schemaLocation="http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.16.3.xsd"
                  trace="false" useMDCLogging="true" useBreadcrumb="false">

        <!-- Using a Camel properties component and referring to the blueprint property placeholder by its ID. -->
        <propertyPlaceholder id="properties"
                             location="blueprint:sidora.karaf.batch.properties,
                             file:${karaf.home}/etc/edu.si.sidora.batch.cfg,
                             file:${karaf.home}/sql/batch.process.sql.properties"/>

        <route id="SidoraRESTService">
            <from uri="cxfrs://bean://rsServer?bindingStyle=SimpleConsumer"/>
            <log message="{id}: Starting SidoraRESTService Request for: ${header.operationName} ... "
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>direct:${header.operationName}</simple>
            </recipientList>

        </route>

        <route id="BatchProcessAddResourceObjects">
            <from uri="direct:addResourceObjects"/>
            <log message="${id}: Starting Batch Request - Add Resource Objects..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- removing headers making it hard to debug-->
            <removeHeaders pattern="User-Agent|CamelHttpCharacterEncoding|CamelHttpPath|CamelHttpQuery|CamelHttpUri|connection|Content-Length|Content-Type|boundary|CamelCxfRsResponseGenericType|org.apache.cxf.request.uri|CamelCxfMessage|CamelHttpResponseCode|Host|accept-encoding|CamelAcceptContentType|CamelCxfRsOperationResourceInfoStack|CamelCxfRsResponseClass|CamelHttpMethod"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    GET
                </simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
            <setHeader headerName="Accept">
                <constant>application/xml</constant>
            </setHeader>

            <toD uri="cxfrs://${header.resourceFileList}" pattern="InOut" id="httpGetResourceList"/>

            <setHeader headerName="resourceXML">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <setHeader headerName="resourceCount">
                <xpath headerName="resourceXML" resultType="java.lang.Integer">
                    count(//file)
                </xpath>
            </setHeader>

            <to uri="bean:batchRequestControllerBean?method=db_insertBatchRequest"/>
            <to uri="sql:{{sql.insertNewBatchRequest}}"/>

            <log message="${id}: Batch Request CorrelationId: ${header.correlationId}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- add each resource to the camelBatchResources mysql table -->
            <split>
                <xpath headerName="resourceXML">
                    //file/text()
                </xpath>

                <to uri="bean:batchRequestControllerBean?method=db_insertResource"/>
                <to uri="sql:{{sql.insertResources}}"/>
            </split>

            <!-- Set the REST response message -->
            <setBody>
                <simple>
                    &lt;Batch&gt;&lt;ParentPID&gt;${header.parentId}&lt;/ParentPID&gt;&lt;CorrelationID&gt;${header.correlationId}&lt;/CorrelationID&gt;&lt;/Batch&gt;
                </simple>
            </setBody>

            <log message="${id}: Finished Batch Request - Add Resource Objects..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <!-- TODO: replace this with direct:batchProcessRequestStatus -->
        <route id="BatchProcessAddResourceObjectsRequestStatus">
            <from uri="direct:batchProcessAddResourceObjectsRequestStatus"/>
            <to uri="bean:batchRequestControllerBean?method=checkBatchRequestStatus"/>
            <to uri="sql:{{sql.checkBatchRequestStatus}}"/>
            <to uri="bean:responseControllerBean?method=batchRequestStatus"/>

        </route>

        <route id="BatchProcessRequestStatus">
            <from uri="direct:requestStatus"/>
            <to uri="bean:batchRequestControllerBean?method=checkBatchRequestStatus"/>
            <to uri="sql:{{sql.checkBatchRequestStatus}}"/>
            <to uri="bean:responseControllerBean?method=batchRequestStatus"/>

        </route>

        <!-- route that process the Batch Requests by picking up new rows from the database
        and when done processing then update the row to mark it as complete -->
        <route id="BatchProcessResources">
            <from uri="sql:{{sql.selectBatchProcess}}?onConsume={{sql.markBatchProcessComplete}}"/>
            <log message="${id}: Starting Batch Resources Processing..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Setup the authorization header for http calls to fedora REST endpoint -->
            <to uri="bean:requestProcessor?method=setAuthorization"/>

            <to uri="bean:batchRequestControllerBean?method=processBatchRequest"/>

            <to uri="sql:{{sql.selectResources}}"/>

            <log message="${id}: Batch Request CorrelationId: ${header.correlationId}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="CamelFedoraPid">
                <simple>
                    ${header.parentId}
                </simple>
            </setHeader>

            <!-- TODO: Add validations for resources match whats in fedora -->
            <log message="${id}: Batch Request Parent PID=${header.parentId},  Resource Count=${header.resourceCount}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- There may be several kinds of resources with zero or more instances. -->
            <split strategyRef="pidAggregator"> <!-- pidAggregator stores pids to ${header.PIDAggregation} -->
                <simple>${body}</simple>

                <log message="{id}: Batch Process: Split Body: ${body}"
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>

                <log message="${id}: Batch Process CamelSplitSize - ${property.CamelSplitSize} CamelSplitIndex - ${property.CamelSplitIndex}"
                     loggingLevel="DEBUG"
                     logName="{{edu.si.batch}}"/>

                <setHeader headerName="resourceFileName">
                    <simple>
                        ${body[resourceFile]}
                    </simple>
                </setHeader>

                <to uri="direct:addResource"/>

                <to uri="bean:batchRequestControllerBean?method=updateProcessCount"/>

                <to uri="sql:{{sql.updateBatchProcessCount}}"/>

                <log message="${id}: Created Resource - ${body}."
                     loggingLevel="INFO"
                     logName="{{edu.si.batch}}"/>
            </split>

            <log message="${id}: Finished Batch Resource Processing."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddResource">
            <from uri="direct:addResource"/>
            <log message="${id}: Started Batch Process: Add Resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    GET
                </simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
            <setHeader headerName="Accept">
                <constant>application/xml</constant>
            </setHeader>
            <setBody>
                <simple></simple>
            </setBody>

            <toD uri="cxfrs://${header.ds_MODS}" pattern="InOut" id="httpGetModsDataStreamFile"/>

            <setHeader headerName="ds_MODSXML">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <!-- TODO: for now assume path/node name for the title in the MODS-->
            <!-- header is an XSLT param -->
            <setHeader headerName="titleNode">
                <simple>
                    title
                </simple>
            </setHeader>
            <!-- header is an XSLT param -->
            <setHeader headerName="titleLabel">
                <xpath resultType="java.lang.String" headerName="ds_MODSXML">
                    concat(//mods:title/text(), function:simple(&#39;(${property.CamelSplitIndex})&#39;))
                </xpath>
            </setHeader>

            <log message="${id}: Batch Process Title/Label: ${header.titleLabel} For Resource: ${header.resourceFileName}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <!--<toD uri="fedora:create?pid=null&amp;owner=${header.resourceOwner}&amp;namespace=si&amp;label=${header.titleLabel}"/>-->

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setHeader headerName="Content-Type">
                <constant>text/xml</constant>
            </setHeader>
            <setBody>
                <simple></simple>
            </setBody>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/new?ownerId=${header.resourceOwner}&amp;namespace=si&amp;label=${header.titleLabel}&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="newFedoraObject"/>

            <setHeader headerName="CamelFedoraPid">
                <simple resultType="java.lang.String">
                    ${body}
                </simple>
            </setHeader>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <to uri="velocity:file:Input/templates/BatchResourceTemplate.vsl"/>

            <!--<to uri="fedora:addDatastream?name=RELS-EXT&amp;group=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;versionable=false"/>-->

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/RELS-EXT?controlGroup=X&amp;dsLabel=RDF%20Statements%20about%20this%20object&amp;mimeType=application/rdf+xml&amp;versionable=false&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addRels-ExtDatastream"/>

            <!-- Need the Mime Type for the OBJ datastream -->
            <!--<to uri="direct:addFITSDatastream"/>-->
            <to uri="bean:batchRequestControllerBean?method=getMIMEType"/>

            <log message="${id}: Batch Process: Found: ${header.dsMIME}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!--<toD uri="fedora:addDatastream?name=OBJ&amp;type=${header.dsMIME}&amp;group=M&amp;dsLabel=${header.titleLabel}&amp;versionable=false"/>-->

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <setBody>
                <simple></simple>
            </setBody>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/OBJ?dsLocation=${header.resourceFileName}&amp;mimeType=${header.dsMIME}&amp;controlGroup=M&amp;dsLabel=${header.titleLabel}&amp;versionable=false&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addObjDatastream"/>


            <!-- add codebook relationship when needed-->
            <choice>
                <when>
                    <simple>${header.coodebookPID} != null</simple>

                    <setHeader headerName="Exchange.HTTP_METHOD">
                        <simple>
                            POST
                        </simple>
                    </setHeader>
                    <setBody>
                        <simple></simple>
                    </setBody>
                    <to uri="direct:addFGDCDatastream"/>
                </when>
                <otherwise>
                    <to uri="direct:addMODSDatastream"/>
                </otherwise>
            </choice>

            <to uri="direct:addSidoraDatastream"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setBody>
                <simple></simple>
            </setBody>

            <!--<to uri="fedora:hasResource?parentPid=${header.parentId}&amp;childPid=${header.CamelFedoraPid}"/>-->

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.parentId}/relationships/new?predicate=info:fedora/fedora-system:def/relations-external%23hasResource&amp;subject=info:fedora/${header.parentId}&amp;object=info:fedora/${header.CamelFedoraPid}&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addRelationship"/>

            <!-- add codebook relationship when needed-->
            <choice>
                <when>
                    <simple>${header.coodebookPID} != null</simple>

                    <setHeader headerName="Exchange.HTTP_METHOD">
                        <simple>
                            POST
                        </simple>
                    </setHeader>
                    <setBody>
                        <simple></simple>
                    </setBody>

                    <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/relationships/new?predicate=info:fedora/fedora-system:def/relations-external%23hasCodebook&amp;subject=info:fedora/${header.CamelFedoraPid}&amp;object=info:fedora/${header.codebookPID}&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addCodebookRelationship"/>
                </when>
            </choice>

            <log message="${id}: Finished Batch Process: Add Resource..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddFGDCDatastream">
            <from uri="direct:addFGDCDatastream"/>
            <log message="${id}: Started processing FGDC ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Add a FGDC datastream for metadata. -->
            <setBody>
                <simple>
                    ${header.ds_MODSXML}
                </simple>
            </setBody>

            <to uri="xslt:file:Input/xslt/BatchProcess_ManifestResource.xsl?saxon=true"/>

            <log message="${id}: FGDC XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/FGDC?mimeType=text/xml&amp;controlGroup=X&amp;dsLabel=FGDC%20Record&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addFgdcDatastream"/>

            <log message="${id}: Finished processing FGDC."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddMODSDatastream">
            <from uri="direct:addMODSDatastream"/>
            <log message="${id}: Started processing MODS ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <!-- Add a MODS datastream for metadata. -->
            <setBody>
                <simple>
                    ${header.ds_MODSXML}
                </simple>
            </setBody>

            <to uri="xslt:file:Input/xslt/BatchProcess_ManifestResource.xsl?saxon=true"/>

            <log message="${id}: MODS XML -\n${body}"
                 loggingLevel="DEBUG"
                 logName="{{edu.si.batch}}"/>

            <!--<to uri="fedora:addDatastream?name=MODS&amp;type=text/xml&amp;group=X&amp;dsLabel=MODS%20Record"/>-->

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/MODS?mimeType=text/xml&amp;controlGroup=X&amp;dsLabel=MODS%20Record&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addModsDatastream"/>

            <log message="${id}: Finished processing MODS."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddSidoraDatastream">
            <from uri="direct:addSidoraDatastream"/>
            <log message="${id}: Started processing SIDORA Datastream ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <setHeader headerName="Exchange.HTTP_METHOD">
                <simple>
                    POST
                </simple>
            </setHeader>
            <setBody>
                <simple></simple>
            </setBody>

            <!--<to uri="fedora:addDatastream?name=SIDORA&amp;type=text/xml&amp;group=X&amp;dsLabel=SIDORA"/>-->

            <toD uri="cxfrs://{{si.fedora.host}}/objects/${header.CamelFedoraPid}/datastreams/SIDORA?dsLocation=${header.ds_SIDORA}&amp;mimeType=text/xml&amp;controlGroup=X&amp;dsLabel=SIDORA&amp;headerFilterStrategy=#dropHeadersStrategy" pattern="InOut" id="addSidoraDatastream"/>

            <log message="${id}: Finished processing SIDORA Datastream ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <route id="BatchProcessAddFITSDatastream">
            <from uri="direct:addFITSDatastream"/>
            <log message="${id}: Started processing FITS ..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <recipientList>
                <simple>
                    exec:fits?args=-i ${header.CamelFileParentDir}/${header.resourceFileName}
                </simple>
            </recipientList>

            <choice>
                <!-- If FITS processing succeeded? Store a FITS datastream on the FDO. -->
                <when>
                    <simple>
                        ${header.CamelExecExitValue} == 0
                    </simple>
                    <setHeader headerName="dsMIME">
                        <xpath resultType="java.lang.String">/fits:fits/fits:identification/fits:identity[1]/@mimetype</xpath>
                        <log message="${id}: FITS MIME: ${header.FITSmimeType}"
                             loggingLevel="DEBUG"
                             logName="{{edu.si.batch}}"/>
                    </setHeader>
                    <log message="${id}: Exec FITS. BODY: ${body}"
                         loggingLevel="DEBUG"
                         logName="{{edu.si.batch}}"/>
                    <to uri="fedora:addDatastream?name=FITS&amp;type=text/xml&amp;dsLabel=FITS%20Generated%20Image%20Metadata&amp;group=X&amp;versionable=false"/>
                </when>
                <otherwise>
                    <log message="${id}: FITS processing failed. PID: ${header.CamelFedoraPid}  Error Code: ${header.CamelExecExitValue}"
                         loggingLevel="ERROR"
                         logName="{{edu.si.batch}}"/>
                </otherwise>
            </choice>

            <log message="${id}: Finished processing FITS."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>

        <!-- This route must be started manually and only fires once to create the table for the batch process -->
        <route id="BatchProcessCreateTable" autoStartup="false">
            <from uri="timer:CreateDB?delay=2000&amp;repeatCount=1" />
            <log message="{id}: Creating DB Table for Batch Process Using {{sql.createBatchProcessRequestTable}}"
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>

            <to uri="sql:{{sql.createBatchProcessRequestTable}}"/>

            <log message="{id}: Finished creating DB Table for Batch Process..."
                 loggingLevel="INFO"
                 logName="{{edu.si.batch}}"/>
        </route>
    </camelContext>

</blueprint>