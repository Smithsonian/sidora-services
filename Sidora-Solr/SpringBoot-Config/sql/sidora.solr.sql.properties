#
# Copyright 2015-2016 Smithsonian Institution.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.You may obtain a copy of
# the License at: http://www.apache.org/licenses/
#
# This software and accompanying documentation is supplied without
# warranty of any kind. The copyright holder and the Smithsonian Institution:
# (1) expressly disclaim any warranties, express or implied, including but not
# limited to any implied warranties of merchantability, fitness for a
# particular purpose, title or non-infringement; (2) do not assume any legal
# liability or responsibility for the accuracy, completeness, or usefulness of
# the software; (3) do not represent that use of the software would not
# infringe privately owned rights; (4) do not warrant that the software
# is error-free or will be maintained, supported, updated or enhanced;
# (5) will not be liable for any indirect, incidental, consequential special
# or punitive damages of any kind or nature, including but not limited to lost
# profits or loss of data, on any basis arising from contract, tort or
# otherwise, even if any of the parties has been warned of the possibility of
# such loss or damage.
#
# This distribution includes several third-party libraries, each with their own
# license terms. For a complete copy of all copyright and license terms, including
# those of third-party libraries, please see the product release notes.
#

##########################################################################
#
# sql for solr processing requests
#
##########################################################################

## sql for pid count
sql.solrPidCount=SELECT count(doPID) as pidCount FROM doRegistry;

## sql that selects all unprocessed Resources with matching correlationId
sql.selectPidBatch=SELECT doPID as pid FROM doRegistry LIMIT {{sidora.solr.page.limit}} OFFSET :#offset;

#sql.insertSolrReindexJob=INSERT INTO sidora.camelSolrReindexing (pid, origin, dsLabel, state, methodName, solrOperation, solrIndex, foxml, solrDoc, solrStatus, startTime, endTime, elapsed, created, updated) VALUES(:#pid, :#origin, :#dsLabel, :#state, :#methodName, :#${header.solrjob.solrOperation}, :#${header.solrjob.index}, :#${header.solrjob.foxml}, :#${header.solrjob.solrdoc}, :#${header.solrjob.solrStatus}, FROM_UNIXTIME(:#${header.solrjob.startTime}/1000), FROM_UNIXTIME(:#${header.solrjob.endTime}/1000), null, null, null);
sql.insertSolrReindexJob=INSERT INTO sidora.camelSolrReindexing (pid, origin, dsLabel, state, methodName, solrOperation, solrIndex,solrStatus, startTime, endTime, elapsed, created, updated) VALUES(:#pid, :#origin, :#dsLabel, :#state, :#methodName, :#${header.solrjob.solrOperation}, :#${header.solrjob.index}, :#${header.solrjob.solrStatus}, FROM_UNIXTIME(:#${header.solrjob.startTime}/1000), FROM_UNIXTIME(:#${header.solrjob.endTime}/1000), null, null, null);

#sql.updateSolrReindexJob=update sidora.camelSolrReindexing set solrDoc = :#${body.solrdoc}, solrStatus = :#${body.solrStatus}, endTime = FROM_UNIXTIME(:#${body.endTime}/1000), elapsed = :#${body.getElapsed} where pid = :#${body.pid} AND solrIndex = :#${body.index}
sql.updateSolrReindexJob=update sidora.camelSolrReindexing set solrDoc = :#solrDoc, solrStatus = :#solrStatus, endTime = FROM_UNIXTIME(:#endTime/1000), elapsed = :#elapsed where pid = :#pid AND solrIndex = :#index

sql.clearSolrReindexTable=truncate table sidora.camelSolrReindexing;

#sql.createCamelSolrReindexingTable=CREATE TABLE IF NOT EXISTS sidora.camelSolrReindexing (id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,pid CHAR(255) NOT NULL,origin CHAR(255) NOT NULL,dsLabel CHAR(255) NOT NULL,state CHAR(255) NOT NULL,methodName CHAR(255) NOT NULL,solrOperation CHAR(255) NOT NULL,solrIndex CHAR(255) NOT NULL,foxml MEDIUMTEXT,solrDoc MEDIUMTEXT,solrStatus TEXT,startTime DATETIME,endTime DATETIME,elapsed TIME,created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);