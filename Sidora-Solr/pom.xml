<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>services</artifactId>
        <groupId>edu.si.services</groupId>
        <version>1.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <!--<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        &lt;!&ndash;<version>1.5.20.RELEASE</version>&ndash;&gt;
        &lt;!&ndash;<version>1.2.8.RELEASE</version>&ndash;&gt;
        <version>1.3.0.RELEASE</version>
        <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;
    </parent>-->

    <artifactId>sidora-solr-spring-boot</artifactId>

    <name>SI :: Services :: Sidora :: Solr (spring-boot)</name>
    <description>Sidora Solr provides event driven create, update, and delete operation to Solr Indexes via Fedora Messaging or REST</description>

    <properties>
        <java.version>1.8</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- Unit Test Properties-->
        <karaf.home>${project.build.directory}/test-classes</karaf.home>
        <!--<solr.host>http://${test.solr.host}</solr.host>-->
        <fedora.home>${project.build.directory}/fedora-home</fedora.home>
        <fuseki.base>${project.build.directory}/fuseki-base</fuseki.base>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- Spring Boot BOM -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- must be first to avoid library conflict, Only needed during testing so scope is test -->
        <!--<dependency>
            <groupId>org.ow2.asm</groupId>
            <artifactId>asm-all</artifactId>
            &lt;!&ndash;<scope>test</scope>&ndash;&gt;
        </dependency>

        &lt;!&ndash;  osgi &ndash;&gt;
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.compendium</artifactId>
            <scope>runtime</scope>
        </dependency>-->

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>4.2.3.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--<dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-spring-boot-starter-jaxrs</artifactId>
            <version>3.2.5</version>
        </dependency>-->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-activemq</artifactId>
        </dependency>-->

        <!-- Camel -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
        </dependency>

        <!-- CXF -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cxf</artifactId>
        </dependency>
        <!-- Will pull other CXF modules such cxf-core and cxf-rt-transports-http, check the pom for more information -->
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-frontend-jaxrs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http-jetty</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>javax.servlet</groupId>
                    <artifactId>javax.servlet-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-extension-providers</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-cxf-transport</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http4</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.geronimo.specs</groupId>
                    <artifactId>geronimo-servlet_3.0_spec</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--<dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-http4-starter</artifactId>
            <version>2.18.0</version>
            &lt;!&ndash; use the same version as your Camel core version &ndash;&gt;
        </dependency>-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.3</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-saxon</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-groovy</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-velocity</artifactId>
        </dependency>

        <!-- Database -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jdbc</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sql</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-dbcp</groupId>
            <artifactId>commons-dbcp</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        <!-- ActiveMQ test gear -->
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-camel</artifactId>
            <!-- break the cyclic dependency to camel-jms which otherwise would baffle the maven eclipse plugin -->
            <!--<exclusions>
                <exclusion>
                    <groupId>org.apache.camel</groupId>
                    <artifactId>camel-jms</artifactId>
                </exclusion>
            </exclusions>-->
        </dependency>

        <!-- Databinding -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jettison</groupId>
            <artifactId>jettison</artifactId>
        </dependency>

        <!--<dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-solrj</artifactId>
            &lt;!&ndash;<version>7.4.0</version>&ndash;&gt;
            <version>7.6.0</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>-->
        <!--solrj has this scoped as test ???-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-solr</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator-docs</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-server</artifactId>
            <version>1.5.7</version>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>1.5.7</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Logging -->
        <!--<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>test</scope>
        </dependency>

        &lt;!&ndash; Test Logging &ndash;&gt;
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>test</scope>
        </dependency>-->

        <!-- Testing -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test-spring</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>1.5.0</version>
            <scope>test</scope>
        </dependency>

        <!--<dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-lucene</artifactId>
            <version>${camel.version}</version>
            <scope>test</scope>
        </dependency>-->

        <!-- Lucene -->
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-core</artifactId>
            <version>7.6.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.lucene</groupId>
            <artifactId>lucene-test-framework</artifactId>
            <version>7.6.0</version>
            <scope>test</scope>
        </dependency>

        <!-- Solr -->
        <!--<dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-core</artifactId>
            &lt;!&ndash;<version>7.4.0</version>&ndash;&gt;
            <version>7.6.0</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-slf4j-impl</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-1.2-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>-->

        <!--<dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-test-framework</artifactId>
            &lt;!&ndash;<version>7.4.0</version>&ndash;&gt;
            <version>7.6.0</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-slf4j-impl</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-1.2-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.logging.log4j</groupId>
                    <artifactId>log4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>-->
        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-tools</artifactId>
            <version>2.0</version>
            <scope>test</scope>
        </dependency>

        <!--<dependency>
            <groupId>org.codehaus.woodstox</groupId>
            <artifactId>woodstox-core-asl</artifactId>
            <scope>provided</scope>
        </dependency>-->

        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>10.11.1.1</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.hawt</groupId>
            <artifactId>hawtio-springboot-1</artifactId>
            <version>2.6.0</version>
        </dependency>

    </dependencies>

    <build>

        <!--The properties file that will be used for tests and token replacement during resource filtering-->
        <!--<filters>
            <filter>${test.properties}</filter>
        </filters>-->

        <resources>
            <!-- don't forget to specify the default test resources directory -->
            <!--<resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>-->

            <resource>
                <directory>src/main/resources</directory>
                <targetPath>${project.build.outputDirectory}</targetPath>
                <includes>
                    <include>camel/**</include>
                </includes>
            </resource>
            <!-- copy the system properties file to target dir -->
            <resource>
                <directory>SpringBoot-Config</directory>
                <targetPath>${project.build.directory}/config</targetPath>
                <filtering>true</filtering>
                <!--<excludes>
                    <exclude>camel/**</exclude>
                </excludes>-->
            </resource>
        </resources>

        <!-- Copy test resources to output folder target/test-classes -->
        <testResources>
            <!-- don't forget to specify the default test resources directory -->
            <testResource>
                <directory>src/test/resources</directory>
                <!--<includes>
                    <include>camel/**</include>
                </includes>-->
            </testResource>

            <!-- add the Sidora-Solr Karaf-config directories -->
            <testResource>
                <directory>SpringBoot-Config</directory>
                <targetPath>${karaf.home}/config</targetPath>
                <filtering>true</filtering>
            </testResource>
            <!-- add the Camera Trap Route directory as resources -->
            <testResource>
                <directory>../Routes/Camera Trap/Karaf-config/etc</directory>
                <targetPath>${karaf.home}/config/etc</targetPath>
                <filtering>true</filtering>
            </testResource>

            <testResource>
                <directory>../</directory>
                <targetPath>${karaf.home}/config/etc</targetPath>
                <includes>
                    <include>test.properties</include>
                </includes>
            </testResource>
        </testResources>

        <plugins>
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                &lt;!&ndash;<configuration>
                    <delimiters>
                        <delimiter>@</delimiter>
                    </delimiters>
                    <useDefaultDelimiters>true</useDefaultDelimiters>
                </configuration>&ndash;&gt;
            </plugin>-->

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring.boot-version}</version>
                <configuration>
                    <addResources>false</addResources>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- reserve network ports for integration testing -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <configuration>
                    <portNames>
                        <portName>dynamic.test.port</portName>
                    </portNames>
                </configuration>
                <executions>
                    <execution>
                        <!-- we choose this phase to ensure that the chosen port number is available for test resource filtering, specifically
                          into fedora.fcfg -->
                        <phase>process-test-sources</phase>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>**/*_IT</exclude>
                    </excludes>
                    <systemPropertyVariables>
                        <buildDirectory>${project.build.directory}</buildDirectory>
                        <dynamic.test.port>${dynamic.test.port}</dynamic.test.port>
                        <karaf.home>${karaf.home}</karaf.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <karaf.home>${karaf.home}</karaf.home>
                        <dynamic.test.port>${dynamic.test.port}</dynamic.test.port>
                        <buildDirectory>${project.build.directory}</buildDirectory>
                    </systemPropertyVariables>
                    <includes>
                        <include>**/*_IT</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- to run the example using mvn camel:run -->
            <plugin>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-maven-plugin</artifactId>
                <configuration>
                    <useBlueprint>true</useBlueprint>
                    <applicationContextUri>sidora-solr-route.xml</applicationContextUri>
                    <!--<logClasspath>true</logClasspath>-->
                    <configAdminFileName>${project.build.directory}/test-classes/etc/edu.si.sidora.solr.cfg</configAdminFileName>
                    <configAdminPid>edu.si.sidora.solr</configAdminPid>
                    <systemProperties>
                        <property>
                            <key>karaf.home</key>
                            <value>${project.build.directory}/test-classes</value>
                        </property>
                    </systemProperties>
                </configuration>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.8</version>
                <configuration>
                    <repository>sidora/${project.artifactId}</repository>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <!-- Profile configuration -->
    <profiles>
        <!-- The configuration of the testing profile -->
        <profile>
            <id>test</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <!-- supply properties to generate new config files -->
                            <execution>
                                <id>loadTestProperties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files combine.self="append">
                                        <!--<file>${project.root.basedir}/test.properties</file>-->
                                        <file>${project.root.basedir}/test.properties</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- The configuration of the production profile -->
        <!-- The profile will be activated when the system property "smx.home.path" is specified with any value -->
        <profile>
            <id>prod</id>
            <activation>
                <property>
                    <name>smx.home.path</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                        <executions>
                            <!-- use production properties to generate new config files -->
                            <execution>
                                <id>loadSMXProperties</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>read-project-properties</goal>
                                </goals>
                                <configuration>
                                    <files combine.self="append">
                                        <file>${smx.home.path}/etc/edu.si.sidora.batch.cfg</file>
                                        <file>${smx.home.path}/etc/edu.si.sidora.emammal.cfg</file>
                                        <file>${smx.home.path}/etc/edu.si.sidora.karaf.cfg</file>
                                        <file>${smx.home.path}/etc/edu.si.sidora.mci.cfg</file>
                                        <file>${smx.home.path}/etc/system.properties</file>
                                    </files>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
